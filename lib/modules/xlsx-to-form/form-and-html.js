// Generated by CoffeeScript 1.4.0
(function() {
  var FormAndHmtl, HtmlWriter,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  HtmlWriter = require('./html-writer');

  FormAndHmtl = (function() {

    function FormAndHmtl() {
      this.createHtml = __bind(this.createHtml, this);

      this.createCss = __bind(this.createCss, this);

    }

    FormAndHmtl.prototype.createCss = function(form) {
      var cssClass, cssPrefix, result, _i, _len, _ref;
      cssPrefix = ".xlsl-form-container ";
      result = "";
      _ref = form.cssClasses || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cssClass = _ref[_i];
        result += " " + cssPrefix + " ." + cssClass.name + " {";
        if (cssClass.fontName && cssClass.fontName.length > 0) {
          result += "font-family:\"" + cssClass.fontName + "\";";
        }
        if (cssClass.fontSize) {
          result += "font-size:" + cssClass.fontSize + ";";
        }
        if (cssClass.fontWeight) {
          result += "font-weight:" + cssClass.fontWeight + ";";
        }
        if (cssClass.fontStyle && cssClass.fontStyle.length > 0) {
          result += "font-style:" + cssClass.fontStyle + ";";
        }
        if (cssClass.fontColor && cssClass.fontColor.length > 0) {
          result += "color:" + cssClass.fontColor + ";";
        }
        if (cssClass.horizontalAlignment && cssClass.horizontalAlignment.length > 0) {
          result += "text-align:" + cssClass.horizontalAlignment + ";";
        }
        if (cssClass.backgroundColor && cssClass.backgroundColor.length > 0) {
          result += "background:" + cssClass.backgroundColor + ";";
        }
        if (cssClass.borderTop) {
          result += "border-top:" + cssClass.borderTop + ";";
        }
        if (cssClass.borderBottom) {
          result += "border-bottom:" + cssClass.borderBottom + ";";
        }
        if (cssClass.borderLeft) {
          result += "border-left:" + cssClass.borderLeft + ";";
        }
        if (cssClass.borderRight) {
          result += "border-right:" + cssClass.borderRight + ";";
        }
        /*
        
                          borderLeft: @_toBorderCss(col.borderLeft)
                          borderRight: @_toBorderCss(col.borderRight)
                          borderTop: @_toBorderCss(col.borderTop)
                          borderBottom: @_toBorderCss(col.borderBottom)
        */

        result += "}";
      }
      return result;
    };

    FormAndHmtl.prototype.createHtml = function(form, options) {
      var c, cell, height, r, row, skipCell, totalWidth, width, writer, x, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      if (options == null) {
        options = {};
      }
      if (!options.isActiveInputCell) {
        options.isActiveInputCell = function(cell) {
          return !(cell.text && cell.text.length > 0);
        };
      }
      if (!options.isActiveInputCellCurrent) {
        options.isActiveInputCellCurrent = function(cell) {
          return !(cell.text && cell.text.length > 0);
        };
      }
      writer = new HtmlWriter();
      writer.pushTag("table");
      writer.addAttribute("class", "xslx-table");
      writer.addAttribute("cellspacing", "0");
      totalWidth = 0;
      _ref = form.colWidths || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        totalWidth += x;
      }
      writer.addAttribute("width", "" + totalWidth);
      writer.pushTag("tbody");
      _ref1 = form.rows;
      for (r = _j = 0, _len1 = _ref1.length; _j < _len1; r = ++_j) {
        row = _ref1[r];
        writer.pushTag("tr");
        height = form.rowHeights[r] || 0;
        writer.addAttribute("style", "height:" + height + "px;");
        _ref2 = row.cells;
        for (c = _k = 0, _len2 = _ref2.length; _k < _len2; c = ++_k) {
          cell = _ref2[c];
          skipCell = false;
          if (cell.mergedCell && cell.mergedCell.cols) {
            if (cell.mergedCell.col !== c || cell.mergedCell.row !== r) {
              skipCell = true;
            }
          }
          if (!skipCell) {
            writer.pushTag("td");
            if (cell.mergedCell && cell.mergedCell.cols) {
              if (cell.mergedCell.cols > 1) {
                writer.addAttribute("colspan", cell.mergedCell.cols);
              }
              if (cell.mergedCell.rows > 1) {
                writer.addAttribute("rowspan", cell.mergedCell.rows);
              }
            }
            width = form.colWidths[c] || 0;
            writer.addAttribute("width", "" + width);
            writer.addAttribute("style", "width:" + width + "px;");
            writer.addAttribute("class", "" + (cell.cellCssClass || '') + " " + (cell.fontCssClass || ''));
            if (!options.isActiveInputCellCurrent(cell)) {
              if (options.isActiveInputCell(cell)) {
                writer.writeText("");
              } else {
                writer.writeText(cell.text);
              }
            } else {
              writer.pushTag("input");
              writer.addAttribute("type", "text");
              writer.addAttribute("style", "width:100%;height:100%;border:none;background-color:#f4f4f4");
              writer.addAttribute("data-row", r);
              writer.addAttribute("data-cell", c);
              writer.addAttribute("class", "r-" + r + " c-" + c + " excel-input");
              writer.popTag();
            }
            writer.popTag();
          }
        }
        writer.popTag();
      }
      writer.popTag();
      writer.popTag();
      return writer.html();
    };

    return FormAndHmtl;

  })();

  module.exports = new FormAndHmtl();

}).call(this);
