// Generated by CoffeeScript 1.4.0
(function() {
  var Encoder, FormAndHmtl, HtmlWriter, numericalEncoder,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  HtmlWriter = require('./html-writer');

  Encoder = require('node-html-encoder').Encoder;

  numericalEncoder = new Encoder('numerical');

  FormAndHmtl = (function() {

    function FormAndHmtl() {
      this.createHtml = __bind(this.createHtml, this);

      this.createCss = __bind(this.createCss, this);

    }

    FormAndHmtl.prototype.createCss = function(form) {
      var cssClass, cssPrefix, result, _i, _len, _ref;
      cssPrefix = ".xlsl-form-container ";
      result = "";
      _ref = form.cssClasses || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cssClass = _ref[_i];
        result += " " + cssPrefix + " ." + cssClass.name + " {";
        if (cssClass.fontName && cssClass.fontName.length > 0) {
          result += "font-family:\"" + cssClass.fontName + "\";";
        }
        if (cssClass.fontSize) {
          result += "font-size:" + cssClass.fontSize + ";";
        }
        if (cssClass.fontWeight) {
          result += "font-weight:" + cssClass.fontWeight + ";";
        }
        if (cssClass.fontStyle && cssClass.fontStyle.length > 0) {
          result += "font-style:" + cssClass.fontStyle + ";";
        }
        if (cssClass.color && cssClass.color.length > 0) {
          result += "color:" + cssClass.color + ";";
        }
        if (cssClass.horizontalAlignment && cssClass.horizontalAlignment.length > 0) {
          result += "text-align:" + cssClass.horizontalAlignment + ";";
        }
        if (cssClass.backgroundColor && cssClass.backgroundColor.length > 0) {
          result += "background:" + cssClass.backgroundColor + ";";
        }
        if (cssClass.backgroundColor && cssClass.backgroundColor.length > 0) {
          result += "border:solid 1px #ddd;";
        }
        /*
              result += "border-top:#{cssClass.borderTop};" if cssClass.borderTop 
              result += "border-bottom:#{cssClass.borderBottom};" if cssClass.borderBottom
              result += "border-left:#{cssClass.borderLeft};" if cssClass.borderLeft
              result += "border-right:#{cssClass.borderRight};" if cssClass.borderRight
        */

        /*
        
                          borderLeft: @_toBorderCss(col.borderLeft)
                          borderRight: @_toBorderCss(col.borderRight)
                          borderTop: @_toBorderCss(col.borderTop)
                          borderBottom: @_toBorderCss(col.borderBottom)
        */

        result += "}";
      }
      return result;
    };

    FormAndHmtl.prototype.createHtml = function(form, options) {
      var c, cell, editAllStates, hasAnInput, height, isActive, isActiveCurrent, r, row, skipCell, totalWidth, width, writer, x, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      if (options == null) {
        options = {};
      }
      if (!options.isActiveInputCell) {
        options.isActiveInputCell = function(cell) {
          return !(cell.text && cell.text.length > 0);
        };
      }
      if (!options.isActiveInputCellCurrent) {
        options.isActiveInputCellCurrent = function(cell) {
          return !(cell.text && cell.text.length > 0);
        };
      }
      writer = new HtmlWriter();
      writer.pushTag("table");
      writer.addAttribute("class", "xslx-table");
      writer.addAttribute("cellspacing", "0");
      totalWidth = 0;
      _ref = form.colWidths || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        totalWidth += x;
      }
      writer.addAttribute("width", "" + totalWidth);
      writer.pushTag("tbody");
      _ref1 = form.colWidths || [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        x = _ref1[_j];
        writer.pushTag("col");
        writer.addAttribute("width", "" + x + "px");
        writer.popTag();
      }
      _ref2 = form.rows;
      for (r = _k = 0, _len2 = _ref2.length; _k < _len2; r = ++_k) {
        row = _ref2[r];
        writer.pushTag("tr");
        height = form.rowHeights[r] || 0;
        writer.addAttribute("style", "height:" + height + "px;");
        _ref3 = row.cells;
        for (c = _l = 0, _len3 = _ref3.length; _l < _len3; c = ++_l) {
          cell = _ref3[c];
          skipCell = false;
          if (cell.mergedCell && cell.mergedCell.cols) {
            if (cell.mergedCell.col !== c || cell.mergedCell.row !== r) {
              skipCell = true;
            }
          }
          if (!skipCell) {
            writer.pushTag("td");
            if (cell.mergedCell && cell.mergedCell.cols) {
              if (cell.mergedCell.cols > 1) {
                writer.addAttribute("colspan", cell.mergedCell.cols);
              }
              if (cell.mergedCell.rows > 1) {
                writer.addAttribute("rowspan", cell.mergedCell.rows);
              }
            }
            width = form.colWidths[c] || 0;
            if (!cell.mergedCell) {
              writer.addAttribute("width", "" + width);
              writer.addAttribute("style", "width:" + width + "px;");
            }
            writer.addAttribute("class", "" + (cell.cellCssClass || '') + " " + (cell.fontCssClass || ''));
            isActiveCurrent = !!options.isActiveInputCellCurrent(cell);
            isActive = !!options.isActiveInputCell(cell);
            editAllStates = options.editAllStates;
            hasAnInput = isActiveCurrent || (isActive && editAllStates);
            if (hasAnInput === true || hasAnInput === "true") {
              writer.pushTag("input");
              writer.addAttribute("type", "text");
              writer.addAttribute("style", "width:100%;height:100%;border:none;");
              writer.addAttribute("data-row", r);
              writer.addAttribute("data-cell", c);
              writer.addAttribute("class", "r-" + r + " c-" + c + " excel-input");
              writer.popTag();
            } else {
              if (isActive) {
                writer.pushTag("span");
                writer.addAttribute("data-row", r);
                writer.addAttribute("data-cell", c);
                writer.addAttribute("class", "r-" + r + " c-" + c + " data-element");
                writer.popTag();
              } else {
                writer.pushTag("span");
                /*
                              At this point the text is html encode with stuff like &#35;&#35; in it.
                              We need to decode that
                */

                if (cell.value && cell.value.length > 0 && (numericalEncoder.htmlDecode(cell.value).indexOf("##") === 0 || cell.value.indexOf("##") === 0)) {
                  writer.addAttribute("data-row", r);
                  writer.addAttribute("data-cell", c);
                  if (cell.value.indexOf("##") === 0) {
                    writer.addAttribute("data-formula", cell.value.substring(2));
                  } else {
                    writer.addAttribute("data-formula", numericalEncoder.htmlDecode(cell.value).substring(2));
                  }
                  writer.addAttribute("class", "text-element formula-element");
                  writer.writeTextPlain("");
                } else {
                  if (cell.text && cell.text.length > 0) {
                    writer.addAttribute("class", "text-element");
                  }
                  writer.writeTextPlain(cell.text);
                }
                writer.popTag();
              }
            }
            writer.popTag();
          }
        }
        writer.popTag();
      }
      writer.popTag();
      writer.popTag();
      return writer.html();
    };

    return FormAndHmtl;

  })();

  module.exports = new FormAndHmtl();

}).call(this);
