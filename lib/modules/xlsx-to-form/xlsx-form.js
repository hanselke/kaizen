// Generated by CoffeeScript 1.4.0
(function() {
  var XlsxForm, fs, xlsxParser, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  fs = require('fs');

  xlsxParser = require('../stephen-hardy/xlsx');

  module.exports = XlsxForm = (function() {

    function XlsxForm() {
      this.loadFromPath = __bind(this.loadFromPath, this);

      this.cellFormatCode = __bind(this.cellFormatCode, this);

      this.cellValue = __bind(this.cellValue, this);

      this.cell = __bind(this.cell, this);

      this.maxRow = __bind(this.maxRow, this);

      this.maxCol = __bind(this.maxCol, this);

    }

    XlsxForm.prototype.maxCol = function() {
      return this.xlsx.worksheets[0].maxCol;
    };

    XlsxForm.prototype.maxRow = function() {
      return this.xlsx.worksheets[0].maxRow;
    };

    XlsxForm.prototype.cell = function(row, col) {
      row = this.xlsx.worksheets[0].data[row];
      if (!row) {
        return null;
      }
      return row[col];
    };

    XlsxForm.prototype.cellValue = function(row, col) {
      var cell;
      cell = this.cell(row, col);
      if (!(cell && cell.value)) {
        return "";
      }
      return cell.value;
    };

    XlsxForm.prototype.cellFormatCode = function(row, col) {
      var cell;
      cell = this.cell(row, col);
      if (!(cell && cell.formatCode)) {
        return "";
      }
      return cell.formatCode;
    };

    XlsxForm.prototype.loadFromPath = function(path, cb) {
      var col, file, row, stringRow, _i, _j, _ref, _ref1;
      this.xlsx = null;
      file = fs.readFileSync(path).toString('base64');
      this.xlsx = xlsxParser(file);
      console.log("HHHHHH");
      console.log(this.xlsx.worksheets[0].name);
      console.log("MAX ROW: " + (this.maxRow()));
      console.log("MAX COL: " + (this.maxCol()));
      console.log("ALL: " + (JSON.stringify(this.xlsx)));
      console.log("HHHHHH");
      for (row = _i = 0, _ref = this.maxRow() - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; row = 0 <= _ref ? ++_i : --_i) {
        stringRow = "";
        for (col = _j = 0, _ref1 = this.maxCol() - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; col = 0 <= _ref1 ? ++_j : --_j) {
          stringRow += "" + (JSON.stringify(this.cellValue(row, col))) + ".";
        }
        console.log(stringRow);
      }
      /*
          try
            @xlsx = XLSX.readFile(path)
          catch e
            return cb e
          
      
          console.log "SHEETNAME: #{@xlsx.SheetNames[0]}"
      
          console.log JSON.stringify(@xlsx.Sheets[@xlsx.SheetNames[0]])
          sheetname = @xlsx.SheetNames[0]
      
      
      
          stringify = (val) ->
            switch val.t
              when "n"
                val.v
              when "s", "str"
                JSON.stringify val.v
              else
                throw "unrecognized type " + val.t
      
          sheet = @xlsx.Sheets[sheetname]
      
          if sheet["!ref"]
            r = utils.decode_range(sheet["!ref"])
            R = r.s.r
      
            while R <= r.e.r
              row = []
              C = r.s.c
      
              while C <= r.e.c
                val = sheet[utils.encode_cell(
                  c: C
                  r: R
                )]
                row.push (if val then stringify(val) else "")
                ++C
              console.log row.join(",")
              ++R
      */

      return cb(null);
    };

    return XlsxForm;

  })();

}).call(this);
