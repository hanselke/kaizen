// Generated by CoffeeScript 1.4.0
(function() {
  var Client, Identity, QueryDefinition, QueryRuntime, Runtime, asyncParser, qs, request, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  request = require('request');

  _ = require('underscore');

  qs = require('querystring');

  asyncParser = require('libxml-to-js');

  /*
  Sample requests
  curl -X POST -d 'options=user:admin' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/xml' -H 'Authorization: Basic cmVzdHVzZXI6cmVzdGJwbQ=='  http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8080/bonita-server-rest/API/identityAPI/getAllUsers
  
  admin:bpm
  
  
  curl -X POST -d 'options=user:admin' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/xml' -H 'Authorization: Basic cmVzdHVzZXI6cmVzdGJwbQ=='  http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8080/bonita-server-rest/API/queryDefinitionAPI/getProcesses
  
  Retrieve board data for that process
  
  Retrieve the uuid for the active process with that name
  curl -X POST -d 'options=user:admin' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/xml' -H 'Authorization: Basic cmVzdHVzZXI6cmVzdGJwbQ=='  http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8080/bonita-server-rest/API/queryDefinitionAPI/getLastProcess/QA_Data_Entry
  
  
  curl -X POST -d 'options=user:admin' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/xml' -H 'Authorization: Basic cmVzdHVzZXI6cmVzdGJwbQ=='  http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8080/bonita-server-rest/API/queryDefinitionAPI/getProcessActivities/QA_Data_Entry--1.2
  */


  Identity = require('./identity');

  QueryRuntime = require('./query-runtime');

  QueryDefinition = require('./query-definition');

  Runtime = require('./runtime');

  module.exports = Client = (function() {

    function Client(endpoint, username, password, options) {
      this.endpoint = endpoint;
      this.username = username;
      this.password = password;
      this.options = options != null ? options : {};
      this.post = __bind(this.post, this);

      this._reqWithData = __bind(this._reqWithData, this);

      this._getAuth = __bind(this._getAuth, this);

      this._handleResult = __bind(this._handleResult, this);

      this._parseXml = __bind(this._parseXml, this);

      this._cleanEndpoint = __bind(this._cleanEndpoint, this);

      this.endpoint = this._cleanEndpoint(this.endpoint);
      if (!(this.endpoint && this.endpoint.length > 0)) {
        throw new Error("Endpoint required");
      }
      if (!(this.username && this.username.length > 0)) {
        throw new Error("Username required");
      }
      if (!(this.password && this.password.length > 0)) {
        throw new Error("Password required");
      }
      this.options = {};
      _.defaults(this.options, {
        maxCacheItems: 1000,
        headers: {}
      });
      this.cache = {};
      this.identity = new Identity(this);
      this.queryRuntime = new QueryRuntime(this);
      this.queryDefinition = new QueryDefinition(this);
      this.runtime = new Runtime(this);
    }

    Client.prototype._cleanEndpoint = function(endpoint) {
      if (!endpoint) {
        return null;
      }
      return endpoint.replace(/\/+$/, "");
    };

    Client.prototype._parseXml = function(xml, cb) {
      var _this = this;
      if (xml && xml.length > 0) {
        try {
          return asyncParser(xml, function(err, body) {
            if (err) {
              return cb(err);
            }
            return cb(null, body);
          });
        } catch (e) {
          return cb(new Error("Invalid Body Content \n" + xml), null);
        }
      } else {
        return cb(null, null);
      }
    };

    Client.prototype._handleResult = function(res, bodyBeforeXml, callback) {
      var _this = this;
      if (res && (res.statusCode === 401 || res.statusCode === 403)) {
        return callback(new errors.AccessDenied(""));
      }
      return this._parseXml(bodyBeforeXml, function(err, body) {
        if (res && !(res.statusCode >= 200 && res.statusCode < 300)) {
          return callback(new Error(body ? body.message : "Request failed."));
        } else {
          return callback(null, body, res.statusCode);
        }
      });
    };

    Client.prototype._getAuth = function() {
      return new Buffer("" + this.username + ":" + this.password).toString('base64');
    };

    Client.prototype._reqWithData = function(method, path, actAsUser, data, opt, callback) {
      var headers,
        _this = this;
      if (data == null) {
        data = {};
      }
      headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/xml',
        'authorization': "Basic " + (this._getAuth())
      };
      _.extend(headers, this.options.headers);
      if (actAsUser) {
        data.options = "user:" + actAsUser;
      }
      console.log("INVOKING " + method + " " + this.endpoint + path);
      console.log("    DATA " + (qs.stringify(data)));
      return request({
        uri: "" + this.endpoint + path,
        headers: headers,
        body: data ? qs.stringify(data) : null,
        method: method,
        timeout: 2000
      }, function(err, res, body) {
        if (err) {
          err.status = res.statusCode;
          return callback(err);
        }
        return _this._handleResult(res, body, callback);
      });
    };

    Client.prototype.post = function(path, actAsUser, data, opt, callback) {
      if (opt == null) {
        opt = {};
      }
      return this._reqWithData("POST", path, actAsUser, data, opt, callback);
    };

    return Client;

  })();

}).call(this);
