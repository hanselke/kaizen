// Generated by CoffeeScript 1.4.0
(function() {
  var ObjectId, PageResult, PageResultInfinite, TaskMethods, errors, mongoose, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore-ext');

  PageResult = require('simple-paginator').PageResult;

  PageResultInfinite = require('simple-paginator').PageResultInfinite;

  errors = require('some-errors');

  mongoose = require("mongoose");

  ObjectId = mongoose.Types.ObjectId;

  module.exports = TaskMethods = (function() {
    var CREATE_FIELDS, UPDATE_FIELDS;

    CREATE_FIELDS = ['_id', 'processDefinitionId', 'checkedOutByUserId', 'createdBy', 'state', 'processInstanceUUID'];

    UPDATE_FIELDS = ['processDefinitionId', 'checkedOutByUserId', 'state'];

    function TaskMethods(models) {
      this.models = models;
      this.create = __bind(this.create, this);

    }

    /*
      Create a new processDefinition
    */


    TaskMethods.prototype.create = function(objs, actor, cb) {
      var data, model,
        _this = this;
      if (objs == null) {
        objs = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      data = {};
      if (!data.createdBy) {
        data.createdBy = actor;
      }
      _.extendFiltered(data, CREATE_FIELDS, objs);
      if (!(data.createdBy && data.createdBy.actorId)) {
        return cb(new errors.UnprocessableEntity("createdBy"));
      }
      model = new this.models.Task(data);
      return model.save(function(err) {
        if (err) {
          return cb(err);
        }
        return cb(null, model, true);
      });
    };

    return TaskMethods;

  })();

}).call(this);
