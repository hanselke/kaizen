// Generated by CoffeeScript 1.4.0
(function() {
  var ObjectId, PageResult, PageResultInfinite, TaskMethods, errors, mongoose, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore-ext');

  PageResult = require('simple-paginator').PageResult;

  PageResultInfinite = require('simple-paginator').PageResultInfinite;

  errors = require('some-errors');

  mongoose = require("mongoose");

  ObjectId = mongoose.Types.ObjectId;

  module.exports = TaskMethods = (function() {
    var CREATE_FIELDS, UPDATE_FIELDS;

    CREATE_FIELDS = ['_id', 'processDefinitionId', 'checkedOutByUserId', 'createdBy', 'state', 'activeTaskUUID', 'processInstanceUUID'];

    UPDATE_FIELDS = ['processDefinitionId', 'checkedOutByUserId', 'state', 'activeTaskUUID'];

    function TaskMethods(models) {
      this.models = models;
      this.patchByProcessInstanceUUID = __bind(this.patchByProcessInstanceUUID, this);

      this.patch = __bind(this.patch, this);

      this.get = __bind(this.get, this);

      this.getActiveTask = __bind(this.getActiveTask, this);

      this.create = __bind(this.create, this);

      this.all = __bind(this.all, this);

    }

    TaskMethods.prototype.all = function(options, cb) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.models.Task.count({}, function(err, totalCount) {
        var query;
        if (err) {
          return cb(err);
        }
        query = _this.models.Task.find({});
        query.sort('-createdAt');
        query.select(options.select || '_id processDefinitionId processInstanceUUID state createdAt activeTaskUUID checkedOutByUserId');
        query.setOptions({
          skip: options.offset,
          limit: options.count
        });
        return query.exec(function(err, items) {
          if (err) {
            return cb(err);
          }
          return cb(null, new PageResult(items || [], totalCount, options.offset, options.count));
        });
      });
    };

    /*
      Create a new processDefinition
    */


    TaskMethods.prototype.create = function(objs, actor, cb) {
      var data, model,
        _this = this;
      if (objs == null) {
        objs = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      data = {};
      if (!data.createdBy) {
        data.createdBy = actor;
      }
      _.extendFiltered(data, CREATE_FIELDS, objs);
      if (!(data.createdBy && data.createdBy.actorId)) {
        return cb(new errors.UnprocessableEntity("createdBy"));
      }
      model = new this.models.Task(data);
      return model.save(function(err) {
        if (err) {
          return cb(err);
        }
        return cb(null, model, true);
      });
    };

    /*
      Retrieves the currently active task, if any, for a user.
    */


    TaskMethods.prototype.getActiveTask = function(userId, options, cb) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      userId = userId.toString();
      return this.models.Task.findOne({
        checkedOutByUserId: userId
      }, function(err, item) {
        if (err) {
          return cb(err);
        }
        return cb(null, item);
      });
    };

    /*
      Retrieve a single processDefinition-item through it's id
    */


    TaskMethods.prototype.get = function(taskId, options, cb) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.models.Task.findOne({
        _id: taskId
      }, function(err, item) {
        if (err) {
          return cb(err);
        }
        return cb(null, item);
      });
    };

    TaskMethods.prototype.patch = function(taskId, obj, options, cb) {
      var _this = this;
      if (obj == null) {
        obj = {};
      }
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.models.Task.findOne({
        _id: taskId
      }, function(err, item) {
        if (err) {
          return cb(err);
        }
        if (!item) {
          return cb(new errors.NotFound("/tasks/" + taskId));
        }
        _.extendFiltered(item, UPDATE_FIELDS, obj);
        return item.save(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null, item);
        });
      });
    };

    TaskMethods.prototype.patchByProcessInstanceUUID = function(processInstanceUUID, obj, options, cb) {
      var _this = this;
      if (obj == null) {
        obj = {};
      }
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this.models.Task.findOne({
        processInstanceUUID: processInstanceUUID
      }, function(err, item) {
        if (err) {
          return cb(err);
        }
        if (!item) {
          return _this.models.ProcessDefinition.find({}).select('_id bonitaProcessName').exec(function(err, items) {
            var processDefinitionId, xx, _i, _len;
            processDefinitionId = _.first(items)._id;
            for (_i = 0, _len = items.length; _i < _len; _i++) {
              xx = items[_i];
              if (processInstanceUUID.substr(0, xx.bonitaProcessName.length) === xx.bonitaProcessName) {
                processDefinitionId = xx._id;
              }
            }
            item = new _this.models.Task({
              processInstanceUUID: processInstanceUUID,
              createdBy: options.actor,
              processDefinitionId: processDefinitionId
            });
            _.extendFiltered(item, UPDATE_FIELDS, obj);
            return item.save(function(err) {
              if (err) {
                return cb(err);
              }
              return cb(null, item);
            });
          });
        } else {
          _.extendFiltered(item, UPDATE_FIELDS, obj);
          return item.save(function(err) {
            if (err) {
              return cb(err);
            }
            return cb(null, item);
          });
        }
      });
    };

    return TaskMethods;

  })();

}).call(this);
