// Generated by CoffeeScript 1.4.0
(function() {
  var BoardMethods, MAXCOUNTOBJECTS, MAXFOLLOWERSPERBUCKET, ObjectId, PageResult, PageResultInfinite, errors, mongoose, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore-ext');

  PageResult = require('simple-paginator').PageResult;

  PageResultInfinite = require('simple-paginator').PageResultInfinite;

  errors = require('some-errors');

  mongoose = require("mongoose");

  ObjectId = mongoose.Types.ObjectId;

  MAXFOLLOWERSPERBUCKET = 100;

  MAXCOUNTOBJECTS = 50;

  /*
  Provides methods to interact with boards.
  */


  module.exports = BoardMethods = (function() {
    var CREATE_FIELDS, UPDATE_FIELDS;

    CREATE_FIELDS = ['_id', 'name', 'states', 'captions'];

    UPDATE_FIELDS = ['name', 'states', 'captions'];

    /*
      Initializes a new instance of the @see BoardMethods class.
      @param {Object} models A collection of models that can be used.
    */


    /*
      Initializes a new instance of the @see BoardMethods class.
      @param {Object} models A collection of models that can be used.
    */


    function BoardMethods(models) {
      this.models = models;
      this._getItem = __bind(this._getItem, this);

      this.put = __bind(this.put, this);

      this.patch = __bind(this.patch, this);

      this.destroy = __bind(this.destroy, this);

      this.create = __bind(this.create, this);

      this.createOrPut = __bind(this.createOrPut, this);

      this.firstBoard = __bind(this.firstBoard, this);

      this.get = __bind(this.get, this);

      this.all = __bind(this.all, this);

    }

    BoardMethods.prototype.all = function(options, cb) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      options.select || (options.select = '_id name states captions');
      return this.models.Board.count({}, function(err, totalCount) {
        var query;
        if (err) {
          return cb(err);
        }
        query = _this.models.Board.find({});
        query.select(options.select);
        query.setOptions({
          skip: options.offset,
          limit: options.count
        });
        return query.exec(function(err, items) {
          if (err) {
            return cb(err);
          }
          return cb(null, new PageResult(items || [], totalCount, options.offset, options.count));
        });
      });
    };

    /*
      Retrieve a single board-item through it's id
    */


    BoardMethods.prototype.get = function(boardId, options, cb) {
      var query;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      boardId = new ObjectId(boardId.toString());
      query = this.models.Board.findOne({
        _id: boardId
      });
      if (options.select && options.select.length > 0) {
        query = query.select(options.select);
      }
      return query.exec(cb);
    };

    BoardMethods.prototype.firstBoard = function(options, cb) {
      var query;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      query = this.models.Board.findOne();
      if (options.select && options.select.length > 0) {
        query = query.select(options.select);
      }
      return query.exec(cb);
    };

    BoardMethods.prototype.createOrPut = function(objs, actor, cb) {
      var _this = this;
      if (objs == null) {
        objs = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      if (!objs._id) {
        return cb(new errors.UnprocessableEntity("_id"));
      }
      return this._getItem(objs._id, null, true, false, function(err, item) {
        if (err) {
          return cb(err);
        }
        if (item) {
          return _this.put(objs._id, objs, actor, true, cb);
        } else {
          return _this.create(objs, actor, cb);
        }
      });
    };

    /*
      Create a new board
    */


    BoardMethods.prototype.create = function(objs, actor, cb) {
      var data, model,
        _this = this;
      if (objs == null) {
        objs = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      data = {};
      if (objs.states && _.isString(objs.states)) {
        objs.states = objs.states.split(',');
      }
      if (objs.captions && _.isString(objs.captions)) {
        objs.captions = objs.captions.split(',');
      }
      _.extendFiltered(data, CREATE_FIELDS, objs);
      model = new this.models.Board(data);
      return model.save(function(err) {
        if (err) {
          return cb(err);
        }
        return cb(null, model, true);
      });
    };

    BoardMethods.prototype.destroy = function(boardId, options, cb) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this._getItem(boardId, options.actor, options.ignoreSecurity, true, function(err, item) {
        if (err) {
          return cb(err);
        }
        if (!item) {
          return cb(null);
        }
        return item.remove(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null);
        });
      });
    };

    BoardMethods.prototype.patch = function(boardId, obj, options, cb) {
      var _this = this;
      if (obj == null) {
        obj = {};
      }
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this._getItem(boardId, options.actor, options.ignoreSecurity, true, function(err, item) {
        if (err) {
          return cb(err);
        }
        if (!item) {
          return cb(new errors.NotFound("/boards/" + boardId));
        }
        if (obj.states && _.isString(obj.states)) {
          obj.states = obj.states.split(',');
        }
        if (obj.captions && _.isString(obj.captions)) {
          obj.captions = obj.captions.split(',');
        }
        _.extendFiltered(item, UPDATE_FIELDS, obj);
        return item.save(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null, item);
        });
      });
    };

    BoardMethods.prototype.put = function(boardId, obj, options, cb) {
      var _this = this;
      if (obj == null) {
        obj = {};
      }
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      return this._getItem(boardId, options.actor, options.ignoreSecurity, true, function(err, item) {
        var field, _i, _len;
        if (err) {
          return cb(err);
        }
        if (!item) {
          return cb(new errors.NotFound("/boards/" + boardId));
        }
        if (obj.states && _.isString(obj.states)) {
          obj.states = obj.states.split(',');
        }
        if (obj.captions && _.isString(obj.captions)) {
          obj.captions = obj.captions.split(',');
        }
        for (_i = 0, _len = UPDATE_FIELDS.length; _i < _len; _i++) {
          field = UPDATE_FIELDS[_i];
          item[field] = null;
        }
        _.extendFiltered(item, UPDATE_FIELDS, obj);
        return item.save(function(err) {
          if (err) {
            return cb(err);
          }
          return cb(null, item);
        });
      });
    };

    BoardMethods.prototype._getItem = function(boardId, actor, ignoreSecurity, forWrite, cb) {
      boardId = new ObjectId(boardId.toString());
      return this.models.Board.findOne({
        _id: boardId
      }, cb);
    };

    return BoardMethods;

  })();

}).call(this);
