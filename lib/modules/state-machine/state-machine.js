// Generated by CoffeeScript 1.4.0
(function() {
  var State, StateMachine, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  State = require('./state');

  module.exports = StateMachine = (function() {

    function StateMachine(settings) {
      this.settings = settings != null ? settings : {};
      this.getFormForState = __bind(this.getFormForState, this);

      this.getNextStateName = __bind(this.getNextStateName, this);

      this.getNextState = __bind(this.getNextState, this);

      this.getState = __bind(this.getState, this);

      this.getInitialState = __bind(this.getInitialState, this);

      this.getSwimlanes = __bind(this.getSwimlanes, this);

      this.loadFromObject = __bind(this.loadFromObject, this);

      _.defaults(this.settings, {});
    }

    StateMachine.prototype.loadFromObject = function(stateMachineData) {
      var key, v, val, _base, _base1, _base2, _base3, _ref, _results;
      if (stateMachineData == null) {
        stateMachineData = {};
      }
      this.stateMachineData = stateMachineData;
      (_base = this.stateMachineData).states || (_base.states = {});
      (_base1 = this.stateMachineData).forms || (_base1.forms = {});
      (_base2 = this.stateMachineData.states).start || (_base2.start = new State({
        name: 'start',
        hideFromlane: true
      }));
      (_base3 = this.stateMachineData.states).end || (_base3.end = new State({
        name: 'end',
        hideFromlane: true
      }));
      _ref = this.stateMachineData.states;
      _results = [];
      for (key in _ref) {
        val = _ref[key];
        v = val || {};
        _.extend(v, {
          name: key
        });
        _results.push(this.stateMachineData.states[key] = new State(v));
      }
      return _results;
    };

    /*
      Returns an array of state objects that should be shown in the swim lane.
    */


    StateMachine.prototype.getSwimlanes = function() {
      var key, result, val, _ref;
      result = [];
      _ref = this.stateMachineData.states;
      for (key in _ref) {
        val = _ref[key];
        if (val && !val.hideFromlane) {
          result.push(val);
        }
      }
      return result;
    };

    /*
      Returns the first state on a new task.
    */


    StateMachine.prototype.getInitialState = function() {
      return this.stateMachineData.initialState || "start";
    };

    StateMachine.prototype.getState = function(stateName) {
      return this.stateMachineData.states[stateName];
    };

    StateMachine.prototype.getNextState = function(currentState, data, cb) {
      var nextState, nextStateName, options, runMe, state, task;
      if (data == null) {
        data = {};
      }
      state = this.getState(currentState);
      if (!state) {
        return cb(new Error("State '" + currentState + "' not found"));
      }
      if (_.isString(state.transitionToNextState)) {
        return cb(null, this.getState(state.transitionToNextState));
      } else if (_.isObject(state.transitionToNextState) && state.transitionToNextState.fn) {
        try {
          task = {};
          options = {};
          runMe = "var task=JSON.parse('" + (JSON.stringify(task)) + "');var data=JSON.parse('" + (JSON.stringify(data)) + "');var options=JSON.parse('" + (JSON.stringify(options)) + "'); var fn = " + state.transitionToNextState.fn + "; fn(task,data,options);";
          console.log("RUNME");
          console.log(runMe);
          console.log("RUNME-END");
          nextStateName = eval(runMe);
          if (!nextStateName) {
            return cb(new Error("Failed to evaluate state transition function for " + currentState));
          }
          nextState = this.getState(nextStateName);
          if (!nextState) {
            return cb(new Error("Invalid next state " + nextStateName + " after transition function for " + currentState));
          }
          return cb(null, nextState);
        } catch (e) {
          return cb(new Error("Failed to execute state transition code: " + e.message));
        }
      } else {
        return cb(new Error("unspecified or wrong state definition"));
      }
    };

    StateMachine.prototype.getNextStateName = function(currentState, data, cb) {
      var _this = this;
      if (data == null) {
        data = {};
      }
      return this.getNextState(currentState, data, function(err, state) {
        if (err) {
          return cb(err);
        }
        return cb(null, state.name);
      });
    };

    StateMachine.prototype.getFormForState = function(state) {
      state = this.getState(state);
      if (!state) {
        return null;
      }
      if (!(state.formToShow && state.formToShow.length > 0)) {
        return null;
      }
      return this.stateMachineData.forms[state.formToShow];
    };

    return StateMachine;

  })();

}).call(this);
