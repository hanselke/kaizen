// Generated by CoffeeScript 1.4.0
(function() {
  var errors, winston;

  errors = require('some-errors');

  winston = require('winston');

  /*
  Generic error handler that takes care of the correct output.
  */


  module.exports = function(app, showStackTrace, airbrake) {
    if (!app) {
      throw new Error("app parameter needs to be defined");
    }
    app.use(function(req, res, next) {
      return res.format({
        html: function() {
          res.status(404);
          return res.render("errors/404", {
            layout: false,
            status: 404,
            title: "Page not found"
          });
        },
        json: function() {
          return res.json(404, {
            message: "Page not found",
            errors: []
          });
        }
      });
    });
    return app.use(function(err, req, res, next) {
      winston.error("" + err);
      if (airbrake) {
        airbrake.notify(err);
      }
      if (err instanceof errors.ClearPassportSession) {
        req.logOut();
        return res.redirect("/");
      } else if (err instanceof errors.NotFound) {
        return res.format({
          html: function() {
            res.status(404);
            return res.render("errors/404", {
              status: 404,
              title: "Page not found "
            });
          },
          json: function() {
            return res.json(404, {
              message: "Page not found",
              errors: []
            });
          }
        });
      } else {
        return res.format({
          html: function() {
            res.status(err.status || 500);
            return res.render("errors/500", {
              status: err.status || 500,
              error: err,
              showStack: showStackTrace,
              title: "Something went wrong!"
            });
          },
          json: function() {
            return res.json(err.status || 500, {
              message: err.message || "Internal Server Error",
              errors: []
            });
          }
        });
      }
    });
  };

}).call(this);
