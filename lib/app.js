// Generated by CoffeeScript 1.4.0

/*
# Load modules
*/


(function() {
  var App, PassportBearerStrategy, PassportLocalStrategy, RoutesLegacy, RoutesRoot, airbrake, backend, checkNeedsInit, checkPerformSiteAction, checkUserNeedsSetup, color, config, cookieDumper, corser, corserMiddleware, env, errorHandling, errors, express, expressFormsFix, expressMessages, flash, fullyQualifiedUrl, identityStorePackage, logHandling, mongoose, passport, passportSetup, path, routeActive, socketIOHandling, stylus, trace, voila, winston, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  path = require('path');

  winston = require('winston');

  config = require('nconf');

  express = require('express');

  color = require('colors');

  passport = require('passport');

  voila = require('voila');

  expressMessages = require('express-messages-bootstrap');

  trace = require('./util/trace');

  passportSetup = require('./site/passport-setup');

  routeActive = require('route-active');

  identityStorePackage = require('mongoose-identity-store');

  corser = require('corser');

  mongoose = require('mongoose');

  backend = require('./js/backend');

  /*
  # Setup version
  */


  require('pkginfo')(module, 'version');

  /*
  # Configure environment
  */


  env = process.env.NODE_ENV || 'development';

  /*
  # Load config
  */


  config.file({
    file: path.join(__dirname, '../config/env', env + '.json')
    /*
    # Setup airbrake if present
    */

  });

  if (config.get('services:airbrake')) {
    airbrake = require('airbrake').createClient(config.get('services:airbrake'));
  }

  process.addListener('uncaughtException', function(err, stack) {
    winston.error("Caught exception: " + err + "\n" + err.stack);
    return airbrake != null ? airbrake.notify(err, function() {}) : void 0;
  });

  errorHandling = require('./site/error-handling');

  logHandling = require('./site/log-handling');

  socketIOHandling = require('./site/socket-io-handling');

  stylus = require('stylus');

  flash = require('connect-flash');

  errors = require('some-errors');

  RoutesRoot = require('./routes/routes-root');

  RoutesLegacy = require('./routes/routes-legacy');

  PassportBearerStrategy = require('passport-http-bearer').Strategy;

  PassportLocalStrategy = require('passport-local').Strategy;

  cookieDumper = function(req, res, next) {
    var k, v, _ref;
    console.log("DUMPING SESSION");
    _ref = req.session;
    for (k in _ref) {
      v = _ref[k];
      console.log("KEY: " + k + " VALUE: " + (JSON.stringify(v)));
    }
    console.log("END DUMPING SESSION");
    return next();
  };

  fullyQualifiedUrl = function(url) {
    var baseUrl;
    if (url == null) {
      url = null;
    }
    baseUrl = config.get('site:url');
    if (url && url[0] === '/') {
      url = url.substr(1);
    }
    if (url) {
      return "" + baseUrl + "/" + url;
    } else {
      return baseUrl;
    }
  };

  expressFormsFix = function() {
    var fn;
    fn = function(req, res, next) {
      res.local = function(key, val) {
        return res.locals[key] = val;
      };
      return next();
    };
    return fn;
  };

  checkNeedsInit = function() {
    var fn;
    fn = function(req, res, next) {
      if (req.user && req.user.needsInit && !routeActive.withRegex(req, /^\/users\/complete-sign-up\/?$/i)) {
        res.redirect('/users/complete-sign-up');
        return;
      }
      return next();
    };
    return fn;
  };

  /*
  Helper that invokes a function in case the user has not been set up yet. It does ignore errors in the setup function to avoid nasty infinite loops.
  */


  checkUserNeedsSetup = function(setupNewUserFn, removeRoleFn) {
    var fn;
    fn = function(req, res, next) {
      var _this = this;
      if (setupNewUserFn && removeRoleFn && req.user && _.find(req.user.roles || [], function(x) {
        return x === 'user-needs-setup';
      })) {
        return setupNewUserFn(req.user.id, function(err, result) {
          if (err) {
            req.flash('error', "Please refresh this page in a couple of seconds.");
          }
          return removeRoleFn(req.user.id, 'user-needs-setup', function(err) {
            return next();
          });
        });
      } else {
        return next();
      }
    };
    return fn;
  };

  corserMiddleware = function(opts) {
    var f,
      _this = this;
    if (opts == null) {
      opts = {};
    }
    f = function(req, res, next) {
      if (req.method === "OPTIONS") {
        res.writeHead(204);
        return res.end();
      } else {
        return next();
      }
    };
    return f;
  };

  checkPerformSiteAction = function() {
    var fn;
    fn = function(req, res, next) {
      var cookie;
      if (req.user) {
        cookie = req.cookies['site-action'];
        res.cookie('site-action', null, {
          maxAge: 0,
          httpOnly: true
        });
        switch (cookie) {
          case 'landing-target-page':
            if (!routeActive.withRegex(req, /^\/account\/target-page\/?$/i)) {
              res.redirect('/account/target-page');
              return;
            }
            break;
          default:
            winston.log("Received unhandled action cookie: " + cookie);
        }
      }
      return next();
    };
    return fn;
  };

  module.exports = App = (function() {

    function App() {
      this.stop = __bind(this.stop, this);

      this.start = __bind(this.start, this);

    }

    /*
      Starts the express server.
      @param {Integer} port the port to listen to. If null then the app does not listen
      @param {} cb an optional callback that is invoked when start is completed, after listen
    */


    App.prototype.start = function(port, cb) {
      var baseUrl, childProcess, database_dir, fs, key, route, settings, _ref, _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;
      if (port == null) {
        port = null;
      }
      if (cb == null) {
        cb = null;
      }
      /*
          #
          # W A R N I N G
          #
          # The ordering here is of vital importance. DO NOT CHANGE ANYTHING. JUST DONT. WE HATE YOU IF YOU DO.
          # Again, changing the ordering of stuff here will in all likelyhood result in a broken system.
          #
      */

      this.app = express();
      mongoose.connect(config.get('services:db'));
      this.identityStore = identityStorePackage.store({
        oauthProvider: config.get('provider')
      });
      if (env !== "production") {
        database_dir = __dirname + '/../db-test';
        backend.set_db_dir(database_dir);
        fs = require('fs');
        childProcess = require('child_process');
        childProcess.exec('rm -rf ' + database_dir, function(error, stdout, stderr) {
          fs.mkdirSync(database_dir, 0x1ed);
          return backend.init_db();
        });
      } else {
        database_dir = __dirname + '/../db';
        backend.set_db_dir(database_dir);
      }
      this.baseUrl = baseUrl = config.get('site:url');
      this.app.use(function(req, res, next) {
        if (port && req.headers.host === '127.0.0.1:#{port}') {
          res.writeHead(303, {
            'Location': "http://localhost:" + port + req.url
          });
          return res.end();
        } else {
          return next();
        }
      });
      this.app.use(express.favicon(__dirname + '/../public/favicon.ico', config.get('cache')));
      this.app.use(express["static"](__dirname + '/../public', config.get('cache')));
      this.app.use(corser.create({
        methods: ["HEAD", "GET", "POST", "PUT", "DELETE", "PATCH"],
        requestHeaders: corser.simpleRequestHeaders.concat(['Authorization']),
        responseHeaders: corser.simpleResponseHeaders.concat(["X-Modeista"]),
        maxAge: config.get('site:corser:timeout')
      }));
      logHandling(this.app);
      this.app.use(express.responseTime());
      this.app.use(corserMiddleware());
      this.app.use(expressFormsFix());
      this.app.use(express.cookieParser(config.get('site:secret')));
      this.app.use(express.cookieSession({
        cookie: {
          maxAge: 31536000000
        }
      }));
      this.app.use(flash());
      this.app.use(express.bodyParser());
      this.app.use(express.methodOverride());
      this.app.use(passport.initialize());
      this.app.use(passport.session());
      this.app.locals({
        config: config,
        packageVersion: exports.version,
        '_': _,
        fullyQualifiedUrl: fullyQualifiedUrl
      });
      this.app.use(function(req, res, next) {
        res.locals.messages = expressMessages;
        res.locals.currentUser = req.user || null;
        res.locals.csrf = req.session && req.session._csrf ? req.session._csrf : "";
        res.locals.title = config.get('site:subTitle');
        res.locals.keywords = config.get('site:keywords');
        res.locals.author = config.get('site:author');
        res.locals.description = config.get('site:description');
        res.locals.ogTitle = res.locals.title;
        res.locals.ogImage = config.get("openGraph:image");
        res.locals.ogDescription = config.get('openGraph:description');
        res.locals.ogType = "website";
        res.locals.ogUrl = config.get('openGraph:url');
        res.locals.infoFlash = function() {
          return req.flash('info') || [];
        };
        res.locals.warningFlash = function() {
          return req.flash('warning') || [];
        };
        res.locals.errorFlash = function() {
          return req.flash('error') || [];
        };
        res.locals.isInRole = function(role) {
          return req.user && req.user.roles && !!_.find(req.user.roles, function(x) {
            return x === role;
          });
        };
        return next();
      });
      settings = {
        app: this.app,
        passport: passport,
        baseUrl: this.baseUrl,
        identityStore: this.identityStore
      };
      this.routes = {
        root: new RoutesRoot(settings),
        legacy: new RoutesLegacy(settings)
      };
      this.app.set('views', __dirname + '/../views');
      this.app.set('view engine', 'jade');
      this.app.use('/assets', voila(__dirname + '/../', config.get('voila')));
      this.app.use(checkNeedsInit());
      this.app.use(checkUserNeedsSetup((_ref = this.appApiClient) != null ? (_ref1 = _ref.actions) != null ? _ref1.setupNewUser : void 0 : void 0, (_ref2 = this.identityStore) != null ? (_ref3 = _ref2.users) != null ? _ref3.deleteRoles : void 0 : void 0));
      this.app.use(checkPerformSiteAction());
      _ref4 = this.routes;
      for (key in _ref4) {
        route = _ref4[key];
        route.setupLocals();
      }
      passportSetup(this.app, this.identityStore, config, baseUrl);
      _ref5 = this.routes;
      for (key in _ref5) {
        route = _ref5[key];
        route.setupRoutes();
      }
      this.app.use(this.app.router);
      errorHandling(this.app, config.get('stacktrace'), airbrake);
      if (port) {
        this.server = this.app.listen(port);
        socketIOHandling(this.server);
        winston.info(("Express server listening on port " + port + " in " + this.app.settings.env + " mode").cyan);
      }
      if (cb) {
        return cb(null, this);
      }
    };

    App.prototype.stop = function(cb) {
      if (cb == null) {
        cb = null;
      }
      if (this.server) {
        this.server.close();
      }
      if (cb) {
        return cb(null, this);
      }
    };

    return App;

  })();

}).call(this);
