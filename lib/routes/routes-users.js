// Generated by CoffeeScript 1.4.0
(function() {
  var FormDataSignIn, RoutesUsers, RoutesUsersPathHelper, form, routeActive, validateSignIn, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  form = require("express-form");

  routeActive = require('route-active');

  RoutesUsersPathHelper = require('./routes-users-path-helper');

  FormDataSignIn = (function() {

    function FormDataSignIn(username, password) {
      this.username = username != null ? username : '';
      this.password = password != null ? password : '';
    }

    return FormDataSignIn;

  })();

  validateSignIn = form(form.filter("username").trim(), form.validate("username", "User Name or Email").required(), form.filter("password").trim(), form.validate("password", "Password").required());

  module.exports = RoutesUsers = (function() {

    function RoutesUsers(settings) {
      this.signInPost = __bind(this.signInPost, this);

      this.signIn = __bind(this.signIn, this);

      this._nextRedirect = __bind(this._nextRedirect, this);

      this.setupRoutes = __bind(this.setupRoutes, this);

      this.setupLocals = __bind(this.setupLocals, this);
      _.extend(this, settings);
      if (!this.app) {
        throw new Error("app parameter is required");
      }
      if (!this.passport) {
        throw new Error("passport parameter is required");
      }
      if (!this.identityStore) {
        throw new Error("identityStore parameter is required");
      }
    }

    RoutesUsers.prototype.setupLocals = function() {
      return this.app.locals.routesUsers = this.routesUsersPathHelper = new RoutesUsersPathHelper;
    };

    RoutesUsers.prototype.setupRoutes = function() {
      this.app.get('/users/sign-in', this.signIn);
      return this.app.post('/users/sign-in', validateSignIn, this.passport.authenticate("local", {
        failureRedirect: "/users/sign-in?error=1"
      }), this.signInPost);
    };

    RoutesUsers.prototype._nextRedirect = function(req, res) {
      return res.redirect(req.body.next || req.query.next || "/");
    };

    RoutesUsers.prototype.signIn = function(req, res) {
      return res.render('users/sign-in', _.extend(new FormDataSignIn(), {
        next: req.query.next,
        layout: false,
        title: "Sign In",
        controllerName: 'users',
        bodyCss: 'userdialog_area has_header_menu'
      }));
    };

    RoutesUsers.prototype.signInPost = function(req, res) {
      return this._nextRedirect(req, res);
    };

    return RoutesUsers;

  })();

}).call(this);
