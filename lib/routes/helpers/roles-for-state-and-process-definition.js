// Generated by CoffeeScript 1.4.0
(function() {
  var stateMachinePackage, _;

  _ = require('underscore');

  stateMachinePackage = require('../../modules/state-machine');

  /*
  Takes an array of object with
  state :..
  processDefinitionId : ..
  
  as input and calls a callback with a map
  
  processDefinitonToStateMap[processDefintionId] = {
    stateName: [roles]  
  }
  
  as output. Those roles are allowed to transition into the next state.
  */


  module.exports = function(statesAndProcessDefinitionIds, dbStore, cb) {
    var processDefinitonToStateMap, stateMachinesForProcessDefinitionId;
    if (statesAndProcessDefinitionIds == null) {
      statesAndProcessDefinitionIds = [];
    }
    stateMachinesForProcessDefinitionId = {};
    processDefinitonToStateMap = {};
    return dbStore.processDefinitions.all({
      count: 1000,
      select: '_id stateMachine'
    }, function(err, processDefinitionsResult) {
      var map, processDefinition, sm, smData, xx, _i, _j, _k, _len, _len1, _len2, _ref;
      if (err) {
        return next(err);
      }
      _ref = processDefinitionsResult.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        processDefinition = _ref[_i];
        smData = null;
        try {
          smData = JSON.parse(processDefinition.stateMachine);
        } catch (e) {
          console.log("Could not parse statemachine for " + processDefinition.name);
          console.log(processDefinition.stateMachine);
        }
        if (smData) {
          sm = stateMachinePackage.stateMachine();
          sm.loadFromObject(smData);
          stateMachinesForProcessDefinitionId[processDefinition._id.toString()] = sm;
        }
      }
      for (_j = 0, _len1 = statesAndProcessDefinitionIds.length; _j < _len1; _j++) {
        xx = statesAndProcessDefinitionIds[_j];
        processDefinitonToStateMap[xx.processDefinitionId.toString()] = {};
      }
      for (_k = 0, _len2 = statesAndProcessDefinitionIds.length; _k < _len2; _k++) {
        xx = statesAndProcessDefinitionIds[_k];
        sm = stateMachinesForProcessDefinitionId[xx.processDefinitionId.toString()];
        map = processDefinitonToStateMap[xx.processDefinitionId.toString()];
        map[xx.state] = sm ? sm.getRolesForState(xx.state) : [];
      }
      return cb(null, processDefinitonToStateMap);
    });
  };

}).call(this);
