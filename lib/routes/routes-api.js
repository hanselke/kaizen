// Generated by CoffeeScript 1.4.0
(function() {
  var RoutesApi, XLSX, async, errors, fs, winston, xlsxToForm, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  async = require('async');

  winston = require('winston');

  errors = require('some-errors');

  fs = require('fs');

  XLSX = require('xlsx');

  xlsxToForm = require('../modules/xlsx-to-form');

  module.exports = RoutesApi = (function() {

    function RoutesApi(settings, servicesBonita) {
      this.servicesBonita = servicesBonita;
      this.getProcessDefintionHtml = __bind(this.getProcessDefintionHtml, this);

      this.getProcessDefintionCss = __bind(this.getProcessDefintionCss, this);

      this.uploadAdminProcessDefinition = __bind(this.uploadAdminProcessDefinition, this);

      this.getAdminProcessDefinition = __bind(this.getAdminProcessDefinition, this);

      this.deleteAdminProcessDefinition = __bind(this.deleteAdminProcessDefinition, this);

      this.postAdminProcessDefinitions = __bind(this.postAdminProcessDefinitions, this);

      this.getAdminProcessDefinitions = __bind(this.getAdminProcessDefinitions, this);

      this.createTask = __bind(this.createTask, this);

      this.addRole = __bind(this.addRole, this);

      this.deleteRole = __bind(this.deleteRole, this);

      this.syncFromBonita = __bind(this.syncFromBonita, this);

      this.syncToBonita = __bind(this.syncToBonita, this);

      this.deleteAdminUser = __bind(this.deleteAdminUser, this);

      this.postAdminUsers = __bind(this.postAdminUsers, this);

      this._addRolesToBonita = __bind(this._addRolesToBonita, this);

      this.getAdminUsers = __bind(this.getAdminUsers, this);

      this.getTasks = __bind(this.getTasks, this);

      this.getBoard = __bind(this.getBoard, this);

      this.getSession = __bind(this.getSession, this);

      this.setupRoutes = __bind(this.setupRoutes, this);

      this.setupLocals = __bind(this.setupLocals, this);

      _.extend(this, settings);
      if (!this.app) {
        throw new Error("app parameter is required");
      }
      if (!this.bonitaClient) {
        throw new Error("bonitaClient parameter is required");
      }
      if (!this.bonitaTransformer) {
        throw new Error("bonitaTransformer parameter is required");
      }
      if (!this.servicesBonita) {
        throw new Error("servicesBonita parameter is required");
      }
      if (!this.servicesBonita.processName) {
        throw new Error("servicesBonita.processName parameter is required");
      }
    }

    RoutesApi.prototype.setupLocals = function() {};

    RoutesApi.prototype.setupRoutes = function() {
      this.app.get('/api/session', this.getSession);
      this.app.get('/api/board', this.getBoard);
      this.app.get('/api/tasks', this.getTasks);
      this.app.post('/api/tasks', this.createTask);
      this.app.get('/api/admin/users', this.getAdminUsers);
      this.app.post('/api/admin/users', this.postAdminUsers);
      this.app["delete"]('/api/admin/users/:userId', this.deleteAdminUser);
      this.app.post('/api/admin/users/synctobonita', this.syncToBonita);
      this.app.post('/api/admin/users/syncfrombonita', this.syncFromBonita);
      this.app.post('/api/admin/users/:userId/roles/:role', this.addRole);
      this.app["delete"]('/api/admin/users/:userId/roles/:role', this.deleteRole);
      this.app.get('/api/admin/process-definitions', this.getAdminProcessDefinitions);
      this.app.post('/api/admin/process-definitions', this.postAdminProcessDefinitions);
      this.app["delete"]('/api/admin/process-definitions/:processDefinitionId', this.deleteAdminProcessDefinition);
      this.app.get('/api/admin/process-definitions/:processDefinitionId', this.getAdminProcessDefinition);
      this.app.post('/api/admin/process-definitions/:processDefinitionId', this.uploadAdminProcessDefinition);
      this.app.get('/api/process-definitions/:processDefinitionId/form-css', this.getProcessDefintionCss);
      return this.app.get('/api/process-definitions/:processDefinitionId/form-html', this.getProcessDefintionHtml);
    };

    /*
      Retrieve the current session (e.g. the user that is currently logged in). 
      Returns a 404 if no session exists - e.g. no user is logged in.
    */


    RoutesApi.prototype.getSession = function(req, res) {
      if (!req.user) {
        return res.json({}, 404);
      }
      return res.json(req.user.toRest(this.baseUrl));
    };

    RoutesApi.prototype.getBoard = function(req, res, next) {
      var processName,
        _this = this;
      if (!req.user) {
        return res.json({}, 401);
      }
      processName = this.servicesBonita.processName;
      return this.bonitaClient.queryDefinition.getLastProcess(processName, req.user.username, null, function(err, process) {
        var processDefinition, processUUID, _ref;
        console.log("Processes ------");
        console.log(JSON.stringify(process));
        console.log("Processes ------");
        if (err) {
          return next(err);
        }
        processDefinition = process;
        processUUID = (_ref = process.uuid) != null ? _ref.value : void 0;
        if (!processUUID) {
          return res.json({
            message: "processUUID not available from getProcesses."
          }, 500);
        }
        return _this.bonitaClient.queryRuntime.getProcessInstances(processUUID, req.user.username, null, function(err, processInstances) {
          var board;
          console.log("*************");
          console.log("" + (JSON.stringify(processInstances)));
          console.log("*************");
          if (err) {
            return next(err);
          }
          if (!processInstances) {
            return res.json({
              message: "processInstances not available from getProcessInstances."
            }, 500);
          }
          board = _this.bonitaTransformer.toBoard(processDefinition, processInstances);
          console.log("RESULT: " + (JSON.stringify(board)));
          return res.json(board);
        });
      });
    };

    /*
      Purpose is to retrieve the next eligible task for a user.
      Scenario:
        1. curl -X POST -d 'options=user:jack' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/xml' -H 'Authorization: Basic cmVzdHVzZXI6cmVzdGJwbQ=='  http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8080/bonita-server-rest/API/queryRuntimeAPI/getOneTask/READY
        2. curl -X POST -d 'options=user:jack' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/xml' -H 'Authorization: Basic cmVzdHVzZXI6cmVzdGJwbQ=='  http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8080/bonita-server-rest/API/runtimeAPI/executeTask/QA_Data_Entry--1.51--7--Assign_enter_floor_data--it079eb8be-05f5-473e-805f-7e5ad655ae26--mainActivityInstance--noLoop/true
        3. curl -X POST -d 'options=user:jack' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/xml' -H 'Authorization: Basic cmVzdHVzZXI6cmVzdGJwbQ=='  http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8080/bonita-server-rest/API/queryRuntimeAPI/getTask/QA_Data_Entry--1.51--7--Assign_enter_floor_data--it079eb8be-05f5-473e-805f-7e5ad655ae26--mainActivityInstance--noLoop
        4. curl -X POST -d 'options=user:jack' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/xml' -H 'Authorization: Basic cmVzdHVzZXI6cmVzdGJwbQ=='  http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8080/bonita-server-rest/API/queryRuntimeAPI/getOneTaskByProcessInstanceUUIDAndActivityState/QA_Data_Entry--1.51--7/READY
        5. curl -X POST -d 'options=user:jack' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/xml' -H 'Authorization: Basic cmVzdHVzZXI6cmVzdGJwbQ=='  http://ec2-54-251-77-171.ap-southeast-1.compute.amazonaws.com:8080/bonita-server-rest/API/runtimeAPI/startTask/QA_Data_Entry--1.51--7--_1_Enter_Floor_Data--it079eb8be-05f5-473e-805f-7e5ad655ae26--mainActivityInstance--noLoop/true
    */


    RoutesApi.prototype.getTasks = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json({}, 401);
      }
      /*
          Obtain one eligible task
      */

      return this.bonitaClient.queryRuntime.getOneTask("READY", req.user.username, null, function(err, taskList) {
        var firstTaskUUID, opts;
        console.log("------1");
        console.log(JSON.stringify(taskList));
        console.log("------1");
        if (err) {
          return next(err);
        }
        firstTaskUUID = taskList != null ? taskList.value : void 0;
        if (firstTaskUUID) {
          /*
                  This is most likely an assign task. So we execute it and assign it to the current user
          */

          return _this.bonitaClient.runtime.executeTask(firstTaskUUID, true, req.user.username, opts = {}, function(err) {
            console.log("------2");
            console.log("EXECUTE TASK");
            console.log("------2");
            if (err) {
              return next(err);
            }
            /*
                      # Now we need to retrieve the process instance id.
            */

            return _this.bonitaClient.queryRuntime.getTask(firstTaskUUID, req.user.username, {}, function(err, t) {
              var processInstanceId, _ref;
              if (err) {
                return next(err);
              }
              console.log("------3");
              console.log(JSON.stringify(t));
              console.log("------3");
              processInstanceId = t != null ? (_ref = t.instanceUUID) != null ? _ref.value : void 0 : void 0;
              if (!processInstanceId) {
                return res.json({});
              }
              /* 
              Now we retrieve a list of possible task states
              */

              return _this.bonitaClient.queryRuntime.getOneTaskByProcessInstanceUUIDAndActivityState(processInstanceId, "READY", req.user.username, {}, function(err, nextTask) {
                var taskUUID;
                console.log("------4");
                console.log(JSON.stringify(nextTask));
                console.log("------4");
                taskUUID = nextTask != null ? nextTask.value : void 0;
                return _this.bonitaClient.runtime.assignTask(taskUUID, req.user.username, req.user.username, {}, function(err) {
                  var result;
                  console.log("------5");
                  console.log("ASSIGN");
                  console.log("------5");
                  result = _this.bonitaTransformer.toNextAction(taskUUID, _this.servicesBonita.baseUrl);
                  return res.json(result);
                });
              });
            });
          });
        } else {
          return res.json({});
        }
      });
    };

    RoutesApi.prototype.getAdminUsers = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json({}, 401);
      }
      return this.bonitaClient.identity.getAllRoles("admin", {}, function(err, roles) {
        if (err) {
          return next(err);
        }
        return _this.identityStore.users.all(0, 100, function(err, result) {
          if (err) {
            return next(err);
          }
          result.roles = _.map(roles.Role, function(x) {
            return {
              name: x.name,
              label: x.label
            };
          });
          return res.json(result);
        });
      });
    };

    RoutesApi.prototype._addRolesToBonita = function(username, roles, cb) {
      var addRole,
        _this = this;
      if (roles == null) {
        roles = [];
      }
      if (!(roles.length > 0)) {
        return cb(null);
      }
      addRole = function(role, cb) {
        winston.info("Adding role " + role + " to " + username);
        return _this.bonitaClient.identity.addRoleToUser(username, role, "admin", {}, function(err) {
          if (err) {
            winston.error("Failed adding role " + role + " to " + username + " - Check if role exists");
          }
          return cb(null);
        });
      };
      return async.forEach(roles, addRole, cb);
    };

    RoutesApi.prototype.postAdminUsers = function(req, res, next) {
      var _this = this;
      if (!req.body.username) {
        return next(new errors.UnprocessableEntity("username"));
      }
      if (!req.body.password) {
        return next(new errors.UnprocessableEntity("password"));
      }
      if (!req.body.roles) {
        req.body.roles = [];
      }
      return this.identityStore.users.create(req.body, function(err, user) {
        if (err) {
          return next(err);
        }
        return _this.bonitaClient.identity.addUser(req.body.username, req.body.password, "admin", null, function(err, u) {
          if (err) {
            return next(err);
          }
          return _this._addRolesToBonita(req.body.username, req.body.roles, function(err) {
            return res.json(user);
          });
        });
      });
    };

    RoutesApi.prototype.deleteAdminUser = function(req, res, next) {
      var userId,
        _this = this;
      userId = req.params.userId;
      return this.identityStore.users.destroy(userId, null, function(err, item) {
        if (err) {
          return next(err);
        }
        if (item) {
          return _this.bonitaClient.identity.removeUser(item.username, "admin", null, function(err, u) {
            return res.json({});
          });
        } else {
          return res.json({});
        }
      });
    };

    RoutesApi.prototype.syncToBonita = function(req, res, next) {
      var _this = this;
      return this.identityStore.users.all(0, 100, function(err, result) {
        var createUserInBonita, handleRoles, items;
        if (err) {
          winston.error(JSON.stringify(err));
        }
        if (err) {
          return next(err);
        }
        items = result.items;
        createUserInBonita = function(user, cb) {
          return _this.bonitaClient.identity.addUser(user.username, "test1234", "admin", null, function(err, u) {
            return cb(null);
          });
        };
        handleRoles = function(user, cb) {
          return _this._addRolesToBonita(user.username, user.roles, function(err) {
            return cb(null);
          });
        };
        return async.forEach(items || [], createUserInBonita, function(err) {
          return async.forEach(items || [], handleRoles, function(err) {
            return res.json({});
          });
        });
      });
    };

    RoutesApi.prototype.syncFromBonita = function(req, res, next) {
      var _this = this;
      return this.bonitaClient.identity.getAllUsers("admin", {}, function(err, users) {
        var createOrUpdate, loadRoles;
        loadRoles = function(user, cb) {
          return _this.bonitaClient.identity.getUserRoles(user.username, "admin", {}, function(err, roles) {
            if (roles && roles.Role && _.isArray(roles.Role)) {
              roles = roles.Role;
            } else if (roles && roles.Role) {
              roles = [roles.Role];
            } else {
              roles = [];
            }
            roles = _.map(roles, function(x) {
              return x.name;
            });
            console.log("---> " + roles);
            /*
                      {}
                      GETUSERROLES: hansel ==> {"Role":{"description":{},"dbid":"0","uuid":"d964abec-6bda-4367-a4b1-0bbe42bc2c08","name":"shift manager","label":"Shift Manager"}}
                      GETUSERROLES: james ==> {"Role":[{"description":"The admin role","dbid":"0","uuid":"994e325b-cc4d-46b5-bc6d-7a9403d926bc","name":"admin","label":"Admin"},{"description":{},"dbid":"0","uuid":"a0f300cc-449
            */

            return _this.identityStore.users.patch(user.username, {
              roles: roles
            }, null, function(err) {
              return cb();
            });
          });
        };
        createOrUpdate = function(user, cb) {
          return _this.identityStore.users.getByName(user.username, function(err, item) {
            var data;
            if (err || item) {
              return cb(null);
            }
            data = {
              username: user.username,
              password: 'bpm',
              primaryEmail: "" + user.uuid + "@x.com"
            };
            return _this.identityStore.users.create(data, function(err, item) {
              if (err) {
                winston.error("ERROR: " + err);
              }
              return cb(null);
            });
          });
        };
        return async.forEach(users.User || [], createOrUpdate, function(err) {
          return async.forEach(users.User || [], loadRoles, function(err) {
            return res.json({});
          });
        });
      });
    };

    RoutesApi.prototype.deleteRole = function(req, res, next) {
      var role, userId,
        _this = this;
      userId = req.params.userId;
      role = req.params.role;
      return this.identityStore.users.removeRoles(userId, [role], function(err, r, item) {
        if (err) {
          return next(err);
        }
        if (item) {
          return _this.bonitaClient.identity.removeRoleFromUser(item.username, role, "admin", null, function(err, u) {
            return res.json({});
          });
        } else {
          return res.json({});
        }
      });
    };

    RoutesApi.prototype.addRole = function(req, res, next) {
      var role, userId,
        _this = this;
      userId = req.params.userId;
      role = req.params.role;
      return this.identityStore.users.addRoles(userId, [role], function(err, r, item) {
        if (err) {
          return next(err);
        }
        if (item) {
          return _this.bonitaClient.identity.addRoleToUser(item.username, role, "admin", null, function(err, u) {
            return res.json({});
          });
        } else {
          return res.json({});
        }
      });
    };

    RoutesApi.prototype.createTask = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json(401, {});
      }
      if (!req.body.processDefinitionId) {
        return res.json(422, {});
      }
      return this.bonitaClient.queryDefinition.getLastProcess(this.servicesBonita.processName, "admin", {}, function(err, process) {
        var processUUID, _ref;
        if (err) {
          return next(err);
        }
        processUUID = process != null ? (_ref = process.uuid) != null ? _ref.value : void 0 : void 0;
        if (!processUUID) {
          return res.send({});
        }
        return _this.bonitaClient.runtime.instantiateProcess(processUUID, req.user.username, {}, function(err, newProcess) {
          var payload, processInstanceUUID;
          if (err) {
            return next(err);
          }
          processInstanceUUID = newProcess != null ? newProcess.value : void 0;
          if (!processInstanceUUID) {
            return res.json(500, {});
          }
          payload = {
            processInstanceUUID: processInstanceUUID,
            processDefinitionId: req.body.processDefinitionId,
            checkedOutByUserId: req.user._id
          };
          return _this.dbStore.tasks.create(payload, {
            actorId: req.user._id
          }, function(err, item) {
            return res.json(item);
          });
        });
      });
    };

    RoutesApi.prototype.getAdminProcessDefinitions = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json(401, {});
      }
      return this.dbStore.processDefinitions.all(null, 0, 200, function(err, result) {
        if (err) {
          return next(err);
        }
        return res.json(result);
      });
    };

    RoutesApi.prototype.postAdminProcessDefinitions = function(req, res, next) {
      var _this = this;
      return this.dbStore.processDefinitions.create(req.body, {
        actorId: req.user._id
      }, function(err, item) {
        return res.json(item);
      });
    };

    RoutesApi.prototype.deleteAdminProcessDefinition = function(req, res, next) {
      var processDefinitionId,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      return this.dbStore.processDefinitions.destroy(processDefinitionId, null, true, function(err, item) {
        if (err) {
          return next(err);
        }
        return res.json({});
      });
    };

    RoutesApi.prototype.getAdminProcessDefinition = function(req, res, next) {
      var processDefinitionId,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      return this.dbStore.processDefinitions.get(processDefinitionId, null, true, function(err, item) {
        if (err) {
          return next(err);
        }
        delete item.sourceXlsx;
        return res.json(item);
      });
    };

    RoutesApi.prototype.uploadAdminProcessDefinition = function(req, res, next) {
      var file, processDefinitionId, xlsx,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      file = req.files.file;
      if (!file) {
        return next(new Error("No file present"));
      }
      xlsx = XLSX.readFile(file.path);
      console.log("SHEETNAME: " + xlsx.SheetNames[0]);
      console.log(JSON.stringify(xlsx.Sheets[xlsx.SheetNames[0]]));
      /*
          for z of xlsx.SheetNames[0]
            continue  if z[0] is "!"
            console.log y + "!" + z + "=" + JSON.stringify(zip.Sheets[y][z].v)
      */

      return fs.readFile(file.path, 'utf8', function(err, content) {
        var base64Content, data;
        if (err) {
          return next(err);
        }
        base64Content = new Buffer(content).toString('base64');
        data = {
          sourceXlsx: base64Content,
          sourceSize: file.size,
          sourceFilename: file.name,
          sourceType: file.type
        };
        return _this.dbStore.processDefinitions.patch(processDefinitionId, data, null, true, function(err, item) {
          if (err) {
            return next(err);
          }
          return res.json({});
        });
      });
    };

    /*
      http://localhost:8001/api/process-definitions/50d22f260b75ca1d9000000c/form-css
    */


    RoutesApi.prototype.getProcessDefintionCss = function(req, res, next) {
      var processDefinitionId,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      return this.dbStore.processDefinitions.get(processDefinitionId, null, true, function(err, item) {
        var layout1Path;
        if (err) {
          return next(err);
        }
        layout1Path = "" + __dirname + "/../../test/fixtures/form1-layout-raw.json";
        return xlsxToForm.loadAndConvertVba(layout1Path, function(err, converted) {
          if (err) {
            return done(err);
          }
          return xlsxToForm.createCssFromLayoutForm(converted, function(err, css) {
            if (err) {
              return done(err);
            }
            res.setHeader('Content-Type', 'text/css');
            return res.send(css);
          });
        });
      });
    };

    /*
      http://localhost:8001/api/process-definitions/50d22f260b75ca1d9000000c/form-html
    */


    RoutesApi.prototype.getProcessDefintionHtml = function(req, res, next) {
      var processDefinitionId,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      return this.dbStore.processDefinitions.get(processDefinitionId, null, true, function(err, item) {
        var layout1Path;
        if (err) {
          return next(err);
        }
        layout1Path = "" + __dirname + "/../../test/fixtures/form1-layout-raw.json";
        return xlsxToForm.loadAndConvertVba(layout1Path, function(err, converted) {
          if (err) {
            return done(err);
          }
          return xlsxToForm.createHtmlFromLayoutForm(converted, function(err, html) {
            if (err) {
              return done(err);
            }
            html = "<html><head><link rel=\"stylesheet\" type=\"text/css\" href=\"http://localhost:8001/api/process-definitions/50d22f260b75ca1d9000000c/form-css\" /></head><body> " + html + "</body></html>";
            return res.send(html);
          });
        });
      });
    };

    return RoutesApi;

  })();

}).call(this);
