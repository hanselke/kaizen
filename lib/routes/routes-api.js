// Generated by CoffeeScript 1.4.0
(function() {
  var RoutesApi, async, errors, winston, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  async = require('async');

  winston = require('winston');

  errors = require('some-errors');

  module.exports = RoutesApi = (function() {

    function RoutesApi(settings, servicesBonita) {
      this.servicesBonita = servicesBonita;
      this.postAdminUsers = __bind(this.postAdminUsers, this);

      this._addRolesToBonita = __bind(this._addRolesToBonita, this);

      this.getAdminUsers = __bind(this.getAdminUsers, this);

      this.getTasks = __bind(this.getTasks, this);

      this.getBoard = __bind(this.getBoard, this);

      this.getSession = __bind(this.getSession, this);

      this.setupRoutes = __bind(this.setupRoutes, this);

      this.setupLocals = __bind(this.setupLocals, this);

      _.extend(this, settings);
      if (!this.app) {
        throw new Error("app parameter is required");
      }
      if (!this.bonitaClient) {
        throw new Error("bonitaClient parameter is required");
      }
      if (!this.bonitaTransformer) {
        throw new Error("bonitaTransformer parameter is required");
      }
      if (!this.servicesBonita) {
        throw new Error("servicesBonita parameter is required");
      }
      if (!this.servicesBonita.processName) {
        throw new Error("servicesBonita.processName parameter is required");
      }
    }

    RoutesApi.prototype.setupLocals = function() {};

    RoutesApi.prototype.setupRoutes = function() {
      this.app.get('/api/session', this.getSession);
      this.app.get('/api/board', this.getBoard);
      this.app.get('/api/tasks', this.getTasks);
      this.app.get('/api/admin/users', this.getAdminUsers);
      return this.app.post('/api/admin/users', this.postAdminUsers);
    };

    /*
      Retrieve the current session (e.g. the user that is currently logged in). 
      Returns a 404 if no session exists - e.g. no user is logged in.
    */


    RoutesApi.prototype.getSession = function(req, res) {
      if (!req.user) {
        return res.json({}, 404);
      }
      return res.json(req.user.toRest(this.baseUrl));
    };

    RoutesApi.prototype.getBoard = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json({}, 401);
      }
      return this.bonitaClient.queryDefinition.getProcesses(req.user.username, null, function(err, processes) {
        var processDefinition, processUUID, _ref;
        if (err) {
          return next(err);
        }
        /*
              @bonitaClient.queryDefinition.getLastProcess @servicesBonita.processName,req.user.username,null, (err,process) =>
                return next err if err
                #console.log "GETLASTPROCESS: #{JSON.stringify(process)}"
                processUUID = process?.uuid?.value
        */

        processDefinition = _.first(processes.ProcessDefinition);
        processUUID = processDefinition != null ? (_ref = processDefinition.uuid) != null ? _ref.value : void 0 : void 0;
        if (!processUUID) {
          return res.json({
            message: "processUUID not available from getLastProcess."
          }, 500);
        }
        return _this.bonitaClient.queryRuntime.getProcessInstances(processUUID, req.user.username, null, function(err, processInstances) {
          var board;
          if (err) {
            return next(err);
          }
          if (!processInstances) {
            return res.json({
              message: "processInstances not available from getProcessInstances."
            }, 500);
          }
          board = _this.bonitaTransformer.toBoard(processes, processInstances);
          console.log("RESULT: " + (JSON.stringify(board)));
          return res.json(board);
        });
      });
    };

    /*
      Sample:
        {"processUUID":{"value":"QA_Data_Entry--1.2"},"instanceUUID":{"value":"QA_Data_Entry--1.2--9"},"rootInstanceUUID":{"value":"QA_Data_Entry--1.2--9"},"uuid":{"value":"QA_Data_Entry--1.2--9--Enter_Floor_Data--itb7637faf-37c4-4cfb-9d10-4306be713a16--mainActivityInstance--noLoop"},"iterationId":"itb7637faf-37c4-4cfb-9d10-4306be713a16","activityInstanceId":"mainActivityInstance","loopId":"noLoop","state":"READY","userId":"admin","lastUpdate":"1353306603343","label":"Enter Floor Data","description":{},"name":"Enter_Floor_Data","startedDate":"0","endedDate":"0","readyDate":"1353306603263","activityDefinitionUUID":{"value":"QA_Data_Entry--1.2--Enter_Floor_Data"},"expectedEndDate":"0","priority":"0","type":"Human","human":"true","stateUpdates":{"StateUpdate":{"dbid":"0","date":"1353306603263","state":"READY","updateUserId":"SYSTEM","initialState":"READY"}},"clientVariables":{},"variableUpdates":{},"assignUpdates":{"AssignUpdate":{"dbid":"0","date":"1353306603345","state":"READY","updateUserId":"SYSTEM","userId":"admin"}},"candidates":{}}}
    */


    RoutesApi.prototype.getTasks = function(req, res, next) {
      var procInstUUID,
        _this = this;
      console.log("RE: " + (JSON.stringify(req.query)) + " AND " + (JSON.stringify(req.params)));
      if (!req.user) {
        return res.json({}, 401);
      }
      procInstUUID = req.params.procInstUUID || req.query.procInstUUID;
      if (!procInstUUID) {
        return res.json({}, 422);
      }
      return this.bonitaClient.queryRuntime.getTaskList(procInstUUID, "READY", req.user.username, null, function(err, taskList) {
        var result;
        if (err) {
          return next(err);
        }
        console.log("RAW: " + (JSON.stringify(taskList)));
        result = _this.bonitaTransformer.toNextAction(taskList, _this.servicesBonita.baseUrl);
        console.log("PRETRANS " + (JSON.stringify(result)));
        if (result.taskUUID) {
          return _this.bonitaClient.runtime.assignTask(result.taskUUID, req.user.username, req.user.username, {}, function(err) {
            console.log("TRANSFORMED: " + (JSON.stringify(tasks)));
            return res.json(result);
          });
        } else {
          return res.json(result);
        }
      });
    };

    RoutesApi.prototype.getAdminUsers = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json({}, 401);
      }
      return this.identityStore.users.all(0, 100, function(err, result) {
        if (err) {
          return next(err);
        }
        console.log(JSON.stringify(result));
        return res.json(result);
      });
    };

    RoutesApi.prototype._addRolesToBonita = function(username, roles, cb) {
      var addRole,
        _this = this;
      if (roles == null) {
        roles = [];
      }
      if (!(roles.length > 0)) {
        return cb(null);
      }
      addRole = function(role, cb) {
        winston.info("Adding role " + role + " to " + username);
        return _this.bonitaClient.identity.addRoleToUser(username, role, "admin", {}, function(err) {
          if (err) {
            winston.error("Failed adding role " + role + " to " + username + " - Check if role exists");
          }
          return cb(null);
        });
      };
      return async.forEach(roles, addRole, cb);
    };

    RoutesApi.prototype.postAdminUsers = function(req, res, next) {
      var _this = this;
      if (!req.body.username) {
        return next(new errors.UnprocessableEntity("username"));
      }
      if (!req.body.password) {
        return next(new errors.UnprocessableEntity("password"));
      }
      if (!req.body.roles) {
        req.body.roles = [];
      }
      return this.identityStore.users.create(req.body, function(err, user) {
        if (err) {
          return next(err);
        }
        return _this.bonitaClient.identity.addUser(req.body.username, req.body.password, "admin", null, function(err, u) {
          if (err) {
            return next(err);
          }
          return _this._addRolesToBonita(req.body.username, req.body.roles, function(err) {
            return res.json(user);
          });
        });
      });
    };

    return RoutesApi;

  })();

}).call(this);
