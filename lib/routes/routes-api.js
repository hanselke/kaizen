// Generated by CoffeeScript 1.4.0
(function() {
  var RoutesApi, async, errors, fs, stateMachinePackage, winston, xlsxToForm, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  async = require('async');

  winston = require('winston');

  errors = require('some-errors');

  fs = require('fs');

  xlsxToForm = require('../modules/xlsx-to-form');

  stateMachinePackage = require('../modules/state-machine');

  module.exports = RoutesApi = (function() {
    var smData;

    function RoutesApi(settings, servicesBonita) {
      this.servicesBonita = servicesBonita;
      this.getNextTask = __bind(this.getNextTask, this);

      this.getBoard = __bind(this.getBoard, this);

      this._getActiveProcessDefinitionId = __bind(this._getActiveProcessDefinitionId, this);

      this.completeTask = __bind(this.completeTask, this);

      this.createTask = __bind(this.createTask, this);

      this._stateMachineForProcessDefinitionId = __bind(this._stateMachineForProcessDefinitionId, this);

      this.getProcessDefinitionHtml = __bind(this.getProcessDefinitionHtml, this);

      this.getExcel = __bind(this.getExcel, this);

      this.getTaskData = __bind(this.getTaskData, this);

      this.saveTaskData = __bind(this.saveTaskData, this);

      this.getProcessDefinitionCss = __bind(this.getProcessDefinitionCss, this);

      this.uploadAdminProcessDefinitionLayout = __bind(this.uploadAdminProcessDefinitionLayout, this);

      this.uploadAdminProcessDefinition = __bind(this.uploadAdminProcessDefinition, this);

      this.getAdminProcessDefinition = __bind(this.getAdminProcessDefinition, this);

      this.patchAdminProcessDefinition = __bind(this.patchAdminProcessDefinition, this);

      this.deleteAdminProcessDefinition = __bind(this.deleteAdminProcessDefinition, this);

      this.postAdminProcessDefinitions = __bind(this.postAdminProcessDefinitions, this);

      this.getAdminProcessDefinitions = __bind(this.getAdminProcessDefinitions, this);

      this.getAdminTasks = __bind(this.getAdminTasks, this);

      this.addRole = __bind(this.addRole, this);

      this.deleteRole = __bind(this.deleteRole, this);

      this.deleteAdminUser = __bind(this.deleteAdminUser, this);

      this.postAdminUsers = __bind(this.postAdminUsers, this);

      this.getAdminUsers = __bind(this.getAdminUsers, this);

      this.deleteAdminRole = __bind(this.deleteAdminRole, this);

      this.postAdminRoles = __bind(this.postAdminRoles, this);

      this.getAdminRoles = __bind(this.getAdminRoles, this);

      this.getSession = __bind(this.getSession, this);

      this.setupRoutes = __bind(this.setupRoutes, this);

      this.setupLocals = __bind(this.setupLocals, this);

      _.extend(this, settings);
      if (!this.app) {
        throw new Error("app parameter is required");
      }
      if (!this.bonitaTransformer) {
        throw new Error("bonitaTransformer parameter is required");
      }
      if (!this.servicesBonita) {
        throw new Error("servicesBonita parameter is required");
      }
      if (!this.servicesBonita.processName) {
        throw new Error("servicesBonita.processName parameter is required");
      }
    }

    RoutesApi.prototype.setupLocals = function() {};

    RoutesApi.prototype.setupRoutes = function() {
      this.app.get('/api/session', this.getSession);
      this.app.get('/api/board', this.getBoard);
      this.app.get('/api/tasks/next-task', this.getNextTask);
      this.app.post('/api/tasks', this.createTask);
      this.app.post('/api/tasks/:taskId/complete', this.completeTask);
      this.app.post('/api/tasks/:taskId/data', this.saveTaskData);
      this.app.get('/api/tasks/:taskId/data', this.getTaskData);
      this.app.get('/api/tasks/:taskId/excel', this.getExcel);
      this.app.get('/api/admin/tasks', this.getAdminTasks);
      this.app.get('/api/admin/users', this.getAdminUsers);
      this.app.post('/api/admin/users', this.postAdminUsers);
      this.app["delete"]('/api/admin/users/:userId', this.deleteAdminUser);
      this.app.get('/api/admin/roles', this.getAdminRoles);
      this.app.post('/api/admin/roles', this.postAdminRoles);
      this.app["delete"]('/api/admin/roles/:roleId', this.deleteAdminRole);
      this.app.post('/api/admin/users/:userId/roles/:role', this.addRole);
      this.app["delete"]('/api/admin/users/:userId/roles/:role', this.deleteRole);
      this.app.get('/api/admin/process-definitions', this.getAdminProcessDefinitions);
      this.app.post('/api/admin/process-definitions', this.postAdminProcessDefinitions);
      this.app["delete"]('/api/admin/process-definitions/:processDefinitionId', this.deleteAdminProcessDefinition);
      this.app.patch('/api/admin/process-definitions/:processDefinitionId', this.patchAdminProcessDefinition);
      this.app.put('/api/admin/process-definitions/:processDefinitionId', this.patchAdminProcessDefinition);
      this.app.get('/api/admin/process-definitions/:processDefinitionId', this.getAdminProcessDefinition);
      this.app.post('/api/admin/process-definitions/:processDefinitionId', this.uploadAdminProcessDefinition);
      this.app.post('/api/admin/process-definitions/:processDefinitionId/layout', this.uploadAdminProcessDefinitionLayout);
      this.app.get('/api/process-definitions/:processDefinitionId/form-css', this.getProcessDefinitionCss);
      return this.app.get('/api/process-definitions/:processDefinitionId/:taskId/form-html', this.getProcessDefinitionHtml);
    };

    /*
      Retrieve the current session (e.g. the user that is currently logged in). 
      Returns a 404 if no session exists - e.g. no user is logged in.
    */


    RoutesApi.prototype.getSession = function(req, res) {
      var _this = this;
      if (!req.user) {
        return res.json({}, 404);
      }
      return this.dbStore.tasks.getActiveTask(req.user._id, {}, function(err, item) {
        var user;
        if (err) {
          return next(err);
        }
        user = req.user.toRest(_this.baseUrl);
        user.activeTask = null;
        if (item) {
          user.activeTask = item.toRest(_this.baseUrl);
        }
        return _this.dbStore.processDefinitions.all({
          actor: null,
          offset: 0,
          count: 1000
        }, function(err, result) {
          var containsAny;
          if (err) {
            return next(err);
          }
          containsAny = function(roleArray, checkAgainstRoles) {
            var x, _i, _len;
            for (_i = 0, _len = checkAgainstRoles.length; _i < _len; _i++) {
              x = checkAgainstRoles[_i];
              if (_.contains(roleArray, x)) {
                return true;
              }
            }
            return false;
          };
          result.items = _.filter(result.items, function(x) {
            return containsAny(x.createableByRoles, req.user.roles);
          });
          user.createableTasks = _.map(result.items, function(x) {
            return {
              _id: x._id,
              name: x.name,
              description: x.description
            };
          });
          return res.json(user);
        });
      });
    };

    RoutesApi.prototype.getAdminRoles = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json({}, 401);
      }
      return this.dbStore.roles.all({}, function(err, pagedResultRoles) {
        if (err) {
          return next(err);
        }
        return res.json(pagedResultRoles);
      });
    };

    RoutesApi.prototype.postAdminRoles = function(req, res, next) {
      var _this = this;
      if (!req.body.name) {
        return next(new errors.UnprocessableEntity("name"));
      }
      return this.dbStore.roles.create(req.body, {}, function(err, user) {
        if (err) {
          return next(err);
        }
        return res.json(user);
      });
    };

    RoutesApi.prototype.deleteAdminRole = function(req, res, next) {
      var roleId,
        _this = this;
      roleId = req.params.roleId;
      return this.dbStore.roles.destroy(roleId, {}, function(err, item) {
        if (err) {
          return next(err);
        }
        return res.json({});
      });
    };

    RoutesApi.prototype.getAdminUsers = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json({}, 401);
      }
      return this.dbStore.roles.all({}, function(err, rolesAsPagesResult) {
        var roles;
        if (err) {
          return next(err);
        }
        roles = _.map(rolesAsPagesResult.items || [], function(x) {
          return x.name;
        });
        if (!_.contains(roles, 'admin')) {
          roles.push("admin");
        }
        if (err) {
          return next(err);
        }
        return _this.identityStore.users.all(0, 200, function(err, result) {
          if (err) {
            return next(err);
          }
          result.roles = _.map(roles, function(role) {
            return {
              name: role,
              label: role
            };
          });
          return res.json(result);
        });
      });
    };

    RoutesApi.prototype.postAdminUsers = function(req, res, next) {
      var _this = this;
      if (!req.body.username) {
        return next(new errors.UnprocessableEntity("username"));
      }
      if (!req.body.password) {
        return next(new errors.UnprocessableEntity("password"));
      }
      if (!req.body.roles) {
        req.body.roles = [];
      }
      return this.identityStore.users.create(req.body, function(err, user) {
        if (err) {
          return next(err);
        }
        return res.json(user);
      });
    };

    RoutesApi.prototype.deleteAdminUser = function(req, res, next) {
      var userId,
        _this = this;
      userId = req.params.userId;
      return this.identityStore.users.destroy(userId, null, function(err, item) {
        if (err) {
          return next(err);
        }
        return res.json({});
      });
    };

    RoutesApi.prototype.deleteRole = function(req, res, next) {
      var role, userId,
        _this = this;
      userId = req.params.userId;
      role = req.params.role;
      return this.identityStore.users.removeRoles(userId, [role], function(err, r, item) {
        if (err) {
          return next(err);
        }
        return res.json({});
      });
    };

    RoutesApi.prototype.addRole = function(req, res, next) {
      var role, userId,
        _this = this;
      userId = req.params.userId;
      role = req.params.role;
      return this.identityStore.users.addRoles(userId, [role], function(err, r, item) {
        if (err) {
          return next(err);
        }
        return res.json({});
      });
    };

    RoutesApi.prototype.getAdminTasks = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json(401, {});
      }
      return this.dbStore.tasks.all({
        actor: null,
        offset: 0,
        count: 200,
        select: '_id processDefinitionId state createdAt checkedOutByUserId name taskEnded nextState'
      }, function(err, result) {
        if (err) {
          return next(err);
        }
        return res.json(result);
      });
    };

    RoutesApi.prototype.getAdminProcessDefinitions = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json(401, {});
      }
      return this.dbStore.processDefinitions.all({
        actor: null,
        offset: 0,
        count: 200
      }, function(err, result) {
        if (err) {
          return next(err);
        }
        return res.json(result);
      });
    };

    RoutesApi.prototype.postAdminProcessDefinitions = function(req, res, next) {
      var _this = this;
      return this.dbStore.processDefinitions.create(req.body, {
        actorId: req.user._id
      }, function(err, item) {
        return res.json(item);
      });
    };

    RoutesApi.prototype.deleteAdminProcessDefinition = function(req, res, next) {
      var processDefinitionId,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      return this.dbStore.processDefinitions.destroy(processDefinitionId, null, true, function(err, item) {
        if (err) {
          return next(err);
        }
        return res.json({});
      });
    };

    RoutesApi.prototype.patchAdminProcessDefinition = function(req, res, next) {
      var processDefinitionId,
        _this = this;
      console.log(JSON.stringify(req.body));
      processDefinitionId = req.params.processDefinitionId;
      return this.dbStore.processDefinitions.patch(processDefinitionId, req.body, {}, function(err, item) {
        if (err) {
          return next(err);
        }
        return res.json(item);
      });
    };

    RoutesApi.prototype.getAdminProcessDefinition = function(req, res, next) {
      var processDefinitionId,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      return this.dbStore.processDefinitions.get(processDefinitionId, null, true, function(err, item) {
        var hasLayout, hasSource;
        if (err) {
          return next(err);
        }
        hasSource = item.sourceXlsx && item.sourceXlsx.length > 0;
        hasLayout = item.layout && _.keys(item.layout).length > 0;
        delete item.sourceXlsx;
        delete item.layout;
        item = item.toJSON();
        item.hasSource = hasSource;
        item.hasLayout = hasLayout;
        return res.json(item);
      });
    };

    RoutesApi.prototype.uploadAdminProcessDefinition = function(req, res, next) {
      var file, processDefinitionId,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      file = req.files.file;
      if (!file) {
        return next(new Error("No file present"));
      }
      return fs.readFile(file.path, 'utf8', function(err, content) {
        var base64Content, data;
        if (err) {
          return next(err);
        }
        base64Content = new Buffer(content).toString('base64');
        data = {
          sourceXlsx: base64Content,
          sourceSize: file.size,
          sourceFilename: file.name,
          sourceType: file.type
        };
        return _this.dbStore.processDefinitions.patch(processDefinitionId, data, {}, function(err, item) {
          if (err) {
            return next(err);
          }
          return res.json({});
        });
      });
    };

    RoutesApi.prototype.uploadAdminProcessDefinitionLayout = function(req, res, next) {
      var file, processDefinitionId,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      file = req.files.file;
      if (!file) {
        return next(new Error("No file present"));
      }
      return fs.readFile(file.path, 'utf8', function(err, content) {
        var parsedJson;
        if (err) {
          return next(err);
        }
        parsedJson = null;
        try {
          parsedJson = JSON.parse(content);
        } catch (e) {
          if (!parsedJson) {
            return next(new Error('Invalid JSON'));
          }
        }
        return xlsxToForm.loadVbaOutput(parsedJson, function(err, converted) {
          if (err) {
            return next(err);
          }
          return _this.dbStore.processDefinitions.saveLayout(processDefinitionId, converted, function(err, item) {
            if (err) {
              return next(err);
            }
            return res.json({});
          });
        });
      });
    };

    /*
      http://localhost:8001/api/process-definitions/50d22f260b75ca1d9000000c/form-css
    */


    RoutesApi.prototype.getProcessDefinitionCss = function(req, res, next) {
      var processDefinitionId,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      return this.dbStore.processDefinitions.get(processDefinitionId, null, true, function(err, item) {
        var layout1Path;
        if (err) {
          return next(err);
        }
        layout1Path = "" + __dirname + "/../../test/fixtures/form1-layout-raw.json";
        return xlsxToForm.loadAndConvertVba(layout1Path, function(err, converted) {
          if (err) {
            return done(err);
          }
          return xlsxToForm.createCssFromLayoutForm(converted, function(err, css) {
            if (err) {
              return done(err);
            }
            res.setHeader('Content-Type', 'text/css');
            return res.send(css);
          });
        });
      });
    };

    /*
      Save the task data. Format: [ {r: 0,c:0, v: 'value' }]
    */


    RoutesApi.prototype.saveTaskData = function(req, res, next) {
      var _this = this;
      return this.dbStore.tasks.get(req.params.taskId, {}, function(err, item) {
        var dataRow, _i, _len, _ref;
        if (err) {
          return next(err);
        }
        _ref = req.body;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          dataRow = _ref[_i];
          item.data["" + dataRow.r + "-" + dataRow.c] = dataRow.v;
        }
        item.markModified('data');
        return item.save(function(err) {
          if (err) {
            return next(err);
          }
          return res.json(201, {});
        });
      });
    };

    RoutesApi.prototype.getTaskData = function(req, res, next) {
      var _this = this;
      return this.dbStore.tasks.get(req.params.taskId, {}, function(err, item) {
        if (err) {
          return next(err);
        }
        return _this._stateMachineForProcessDefinitionId(item.processDefinitionId, function(err, sm) {
          var key, rc, result, v, _ref;
          if (err) {
            return next(err);
          }
          result = {};
          result.items = [];
          _ref = item.data;
          for (key in _ref) {
            v = _ref[key];
            rc = key.split('-');
            result.items.push({
              r: rc[0],
              c: rc[1],
              v: v
            });
          }
          result.processDefinitionId = item.processDefinitionId;
          result.form = sm.getFormForState(item.state);
          result.taskName = item.name;
          return res.json(result);
        });
      });
    };

    /*
      http://localhost:8001/api/tasks/50f9893de7d3a46cb000000b/excel
    */


    RoutesApi.prototype.getExcel = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.send(401, "Login required");
      }
      return this.dbStore.tasks.get(req.params.taskId, {}, function(err, task) {
        if (!task) {
          return res.send(404, "Task not found");
        }
        return _this.dbStore.processDefinitions.get(task.processDefinitionId, null, true, function(err, processDefinition) {
          var buffer, col, data, dimensions, row, v, _i, _j, _ref, _ref1, _ref2, _ref3;
          if (err) {
            return next(err);
          }
          if (!processDefinition) {
            return res.send(404, "Process Definition not found");
          }
          res.setHeader('Content-Type', 'text/csv');
          res.setHeader('Content-Disposition', 'fileName="' + processDefinition.sourceFilename + '.csv"');
          dimensions = processDefinition.layout.dimensions;
          data = task.data || {};
          buffer = "";
          for (row = _i = _ref = dimensions.minRow, _ref1 = dimensions.maxRow; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; row = _ref <= _ref1 ? ++_i : --_i) {
            for (col = _j = _ref2 = dimensions.minCol, _ref3 = dimensions.maxCol; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; col = _ref2 <= _ref3 ? ++_j : --_j) {
              if (col > dimensions.minCol) {
                buffer += ",";
              }
              buffer += '"';
              v = data["" + row + "-" + col];
              if (v) {
                buffer += "" + v;
              }
              buffer += '"';
            }
            buffer += "\r\n";
          }
          return res.send(buffer);
          /*
                  xlsxToForm.mergeDataIntoForm processDefinition.sourceXlsx,task.data ,(err,data) =>
          
                    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
                    res.setHeader 'Content-Disposition','fileName="' + processDefinition.sourceFilename + '"'
                    res.setHeader 'Content-Transfer-Encoding', 'binary'
                    res.setHeader 'Accept-Ranges','bytes'
          
                    res.send data
          */

        });
      });
    };

    /*
      http://localhost:8001/api/process-definitions/50d22f260b75ca1d9000000c/taskIdhere/form-html
    */


    RoutesApi.prototype.getProcessDefinitionHtml = function(req, res, next) {
      var processDefinitionId, taskId,
        _this = this;
      processDefinitionId = req.params.processDefinitionId;
      taskId = req.params.taskId;
      return this.dbStore.processDefinitions.get(processDefinitionId, null, true, function(err, item) {
        if (err) {
          return next(err);
        }
        return _this._stateMachineForProcessDefinitionId(processDefinitionId, function(err, sm) {
          if (err) {
            return next(err);
          }
          return _this.dbStore.tasks.get(taskId, {}, function(err, task) {
            var currentTaskState, options;
            if (err) {
              return next(err);
            }
            currentTaskState = sm.getExcelFieldFromState(task.state) || 'undefined';
            options = {
              isActiveInputCell: function(cell) {
                if (!(cell.text && cell.text.length > 0)) {
                  return false;
                }
                if (!(cell.text === 'floor' || cell.text === 'shift manager' || cell.text === 'production manager')) {
                  return false;
                }
                return true;
              },
              isActiveInputCellCurrent: function(cell) {
                if (!(cell.text && cell.text.length > 0)) {
                  return false;
                }
                if (cell.text !== currentTaskState) {
                  return false;
                }
                return true;
              }
            };
            return xlsxToForm.createHtmlFromLayoutForm(item.layout, options, function(err, html) {
              if (err) {
                return done(err);
              }
              html = "" + html;
              return res.send(html);
            });
          });
        });
      });
    };

    /*
      NEW CODE
    */


    smData = {
      initialState: 'qaChecks',
      states: {
        end: {
          hideFromlane: true
        },
        qaChecks: {
          label: "QA Checks",
          hideFromlane: false,
          allowedRoles: ['floor', 'admin'],
          formToShow: null,
          transitionToNextState: "shiftManagerApproval",
          excelField: 'floor'
        },
        shiftManagerApproval: {
          label: "Shift Manager Approval",
          hideFromlane: false,
          allowedRoles: ['shiftManager', 'admin'],
          formToShow: 'approveFloor',
          transitionToNextState: {
            fn: "function(task,data,options) { return data.approvedByShiftManager ? \"productionManagerApproval\" : \"qaChecks\"};"
          },
          excelField: 'shift manager'
        },
        productionManagerApproval: {
          label: "Production Manager Approval",
          hideFromlane: false,
          allowedRoles: ['productionManager', 'admin'],
          formToShow: 'approveShift',
          transitionToNextState: {
            fn: "function(task,data,options) { return data.approvedByProductionManager ? \"end\" : \"qaChecks\"};"
          },
          excelField: 'production manager'
        }
      },
      forms: {
        approveFloor: {
          fields: {
            formCompleted: {
              type: 'yesNoButton',
              labels: ['Process Ok', 'Process Fail'],
              field: 'approvedByShiftManager',
              completesTask: true
            }
          }
        },
        approveShift: {
          fields: {
            formCompleted: {
              type: 'yesNoButton',
              field: 'approvedByProductionManager',
              labels: ['Process Ok', 'Process Fail'],
              completesTask: true
            }
          }
        }
      }
    };

    RoutesApi.prototype._stateMachineForProcessDefinitionId = function(processDefinitionId, cb) {
      var _this = this;
      return this.dbStore.processDefinitions.get2(processDefinitionId, {
        select: '_id stateMachine'
      }, function(err, processDefinition) {
        var sm;
        if (err) {
          return next(cb);
        }
        sm = stateMachinePackage.stateMachine();
        smData = JSON.parse(processDefinition.stateMachine);
        sm.loadFromObject(smData);
        return cb(null, sm);
      });
    };

    /*
      Create a new task.
    */


    RoutesApi.prototype.createTask = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json(401, {});
      }
      if (!req.body.processDefinitionId) {
        return res.json(422, {});
      }
      return this.dbStore.processDefinitions.get2(req.body.processDefinitionId, {
        select: '_id taskNamePrefix'
      }, function(err, processDefinition) {
        if (err) {
          return next(err);
        }
        if (!processDefinition) {
          return next(new Error("process defintion not found"));
        }
        return _this._stateMachineForProcessDefinitionId(req.body.processDefinitionId, function(err, sm) {
          if (err) {
            return next(err);
          }
          return _this.dbStore.tasks.countTasksForProcessDefinitionId(req.body.processDefinitionId, {}, function(err, count) {
            var initialState, name, payload;
            if (err) {
              return next(err);
            }
            count = count + 1;
            name = "" + (processDefinition.taskNamePrefix || "TASK") + count;
            initialState = sm.getInitialState();
            payload = {
              processDefinitionId: req.body.processDefinitionId,
              state: initialState,
              checkedOutByUserId: req.user._id,
              name: name
            };
            return _this.dbStore.tasks.create(payload, {
              actorId: req.user._id
            }, function(err, item) {
              if (err) {
                return next(err);
              }
              item.id = item._id;
              return res.json(item);
            });
          });
        });
      });
    };

    RoutesApi.prototype.completeTask = function(req, res, next) {
      var data,
        _this = this;
      if (!req.user) {
        return res.json(401, {});
      }
      console.log("GOT THIS");
      console.log(JSON.stringify(req.body));
      console.log("GOT THIS---");
      data = req.body.fields || {};
      return this.dbStore.tasks.get(req.params.taskId, {}, function(err, oldTask) {
        if (err) {
          return next(err);
        }
        if (!oldTask) {
          return new Error('task not found');
        }
        return _this._stateMachineForProcessDefinitionId(oldTask.processDefinitionId, function(err, sm) {
          if (err) {
            return next(err);
          }
          return sm.getNextStateName(oldTask.state, data, function(err, nextState) {
            var totalActiveTime;
            if (err) {
              return next(err);
            }
            totalActiveTime = 0;
            if (oldTask.totalActiveTime) {
              try {
                totalActiveTime = oldTask.totalActiveTime;
              } catch (e) {

              }
            }
            if (oldTask.checkedOutDate) {
              totalActiveTime += new Date() - oldTask.checkedOutDate;
            } else if (oldTask.createdAt) {
              totalActiveTime += new Date() - oldTask.createdAt;
            }
            data = {
              activeTaskUUID: null,
              checkedOutByUserId: null,
              checkedOutDate: null,
              checkedInDate: new Date(),
              stateCompleted: true,
              nextState: nextState,
              totalActiveTime: totalActiveTime
            };
            if (nextState === "end") {
              data.taskEnded = true;
            }
            return _this.dbStore.tasks.patch(req.params.taskId, data, {}, function(err, item) {
              if (err) {
                return next(err);
              }
              return res.json(item);
            });
          });
        });
      });
    };

    RoutesApi.prototype._getActiveProcessDefinitionId = function(next) {
      var _this = this;
      return this.dbStore.processDefinitions.firstProcessDefinition({
        select: '_id'
      }, function(err, processDefinition) {
        if (err) {
          return next(err);
        }
        if (!processDefinition) {
          return next(new Error("Process definition not found"));
        }
        return next(null, processDefinition._id);
      });
    };

    RoutesApi.prototype.getBoard = function(req, res, next) {
      var board,
        _this = this;
      if (!req.user) {
        return res.json({}, 401);
      }
      board = {
        lanes: []
      };
      return this._getActiveProcessDefinitionId(function(err, processDefinitionId) {
        if (err || !processDefinitionId) {
          res.json(board);
        }
        return _this._stateMachineForProcessDefinitionId(processDefinitionId, function(err, sm) {
          var i, state, _i, _len, _ref;
          if (err) {
            return next(err);
          }
          _ref = sm.getSwimlanes();
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            state = _ref[i];
            board.lanes.push({
              label: state.label,
              name: state.name,
              order: i,
              activityDefinitions: [],
              id: '',
              totalTime: 0,
              totalCost: 0,
              executionTime: 0,
              waitingTime: 0,
              cards: []
            });
          }
          return _this.dbStore.tasks.tasksForBoard({}, function(err, pagedResult) {
            var lane, laneMap, task, _j, _k, _len1, _len2, _ref1, _ref2;
            if (err) {
              return next(err);
            }
            laneMap = {};
            _ref1 = board.lanes;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              lane = _ref1[_j];
              laneMap[lane.name] = lane;
            }
            _ref2 = pagedResult.items || [];
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              task = _ref2[_k];
              lane = laneMap[task.state];
              if (lane) {
                lane.cards.push({
                  id: task._id,
                  desc: task.name || 'UNNAMED',
                  ready: task.stateCompleted,
                  state: lane.name,
                  processInstance: "",
                  activityDefinitionUUID: "",
                  totalTime: task.totalActiveTime + task.totalWaitingTime,
                  totalCost: 0,
                  executionTime: task.totalActiveTime,
                  waitingTime: task.totalWaitingTime
                });
              }
            }
            return res.json(board);
          });
        });
      });
    };

    /*
      Retrieves the next task, if any, for the current user.
      Logic goes like this:
      1. we check if the user still has an open task. If so, we return up
    */


    RoutesApi.prototype.getNextTask = function(req, res, next) {
      var _this = this;
      if (!req.user) {
        return res.json({}, 401);
      }
      console.log("Retrieving task for " + req.user._id + " and roles " + req.user.roles);
      return this.dbStore.tasks.getActiveTask(req.user.id || req.user._id, {}, function(err, task) {
        if (err) {
          return next(err);
        }
        if (task) {
          task.id = task._id;
          res.json({
            taskId: task._id,
            activeTask: task
          });
          console.log("Task already active - returned");
          return;
        }
        return _this._getActiveProcessDefinitionId(function(err, processDefinitionId) {
          if (err) {
            return next(err);
          }
          return _this._stateMachineForProcessDefinitionId(processDefinitionId, function(err, sm) {
            var states;
            if (err) {
              return next(err);
            }
            states = sm.getStatesForRoles(req.user.roles);
            return _this.dbStore.tasks.getTaskForProcessDefinitionIdAndStates(processDefinitionId, states, {}, function(err, task) {
              var data, totalWaitingTime;
              if (err) {
                return next(err);
              }
              if (!task) {
                return res.json({});
              }
              totalWaitingTime = 0;
              if (task.totalWaitingTime) {
                try {
                  totalWaitingTime = task.totalWaitingTime;
                } catch (e) {

                }
              }
              if (task.checkedInDate) {
                totalWaitingTime += new Date() - task.checkedInDate;
              }
              data = {
                checkedOutByUserId: req.user.id || req.user._id,
                activeTaskUUID: "",
                activeActivityName: "",
                state: task.nextState,
                nextState: null,
                stateCompleted: false,
                checkedOutDate: new Date(),
                checkedInDate: null,
                totalWaitingTime: totalWaitingTime
              };
              return _this.dbStore.tasks.patch(task._id, data, {
                actor: {
                  actorId: req.user._id || req.user.id
                }
              }, function(err, item) {
                if (err) {
                  return next(err);
                }
                console.log("UPDATED " + (JSON.stringify(item)));
                item.id = item._id;
                return res.json({
                  taskId: item._id,
                  activeTask: item
                });
              });
            });
          });
        });
      });
    };

    return RoutesApi;

  })();

}).call(this);
