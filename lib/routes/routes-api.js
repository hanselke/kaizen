// Generated by CoffeeScript 1.4.0
(function() {
  var RoutesApi, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  module.exports = RoutesApi = (function() {

    function RoutesApi(settings) {
      this.getBoard = __bind(this.getBoard, this);

      this.getSession = __bind(this.getSession, this);

      this.setupRoutes = __bind(this.setupRoutes, this);

      this.setupLocals = __bind(this.setupLocals, this);
      _.extend(this, settings);
      if (!this.app) {
        throw new Error("app parameter is required");
      }
      if (!this.bonitaClient) {
        throw new Error("bonitaClient parameter is required");
      }
      this.processName = "QA_Data_Entry";
    }

    RoutesApi.prototype.setupLocals = function() {};

    RoutesApi.prototype.setupRoutes = function() {
      this.app.get('/api/session', this.getSession);
      return this.app.get('/api/board', this.getBoard);
    };

    /*
      Retrieve the current session (e.g. the user that is currently logged in). 
      Returns a 404 if no session exists - e.g. no user is logged in.
    */


    RoutesApi.prototype.getSession = function(req, res) {
      if (!req.user) {
        return res.json({}, 404);
      }
      return res.json(req.user.toRest(this.baseUrl));
    };

    RoutesApi.prototype.getBoard = function(req, res, next) {
      var _this = this;
      return this.bonitaClient.queryDefinition.getLastProcess(this.processName, req.user.username, null, function(err, item) {
        var processUUID, _ref;
        if (err) {
          return next(err);
        }
        processUUID = item != null ? (_ref = item.uuid) != null ? _ref.value : void 0 : void 0;
        if (!processUUID) {
          return res.json({
            message: "processUUID not available from getLastProcess."
          }, 500);
        }
        return _this.bonitaClient.queryRuntime.getProcessInstances(processUUID, req.user.username, null, function(err, processInstances) {
          var result;
          if (err) {
            return next(err);
          }
          if (!processInstances) {
            return res.json({
              message: "processUUID not available from getLastProcess."
            }, 500);
          }
          result = {
            backoffice: [],
            sales: [],
            purchasing: [],
            done: []
          };
          return res.json(result);
        });
      });
    };

    return RoutesApi;

  })();

}).call(this);
